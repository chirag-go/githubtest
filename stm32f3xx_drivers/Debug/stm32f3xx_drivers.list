
stm32f3xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a68  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000bfc  08000bfc  00010bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c08  08000c08  00010c10  2**0
                  CONTENTS
  4 .ARM          00000000  08000c08  08000c08  00010c10  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c08  08000c10  00010c10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c08  08000c08  00010c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c0c  08000c0c  00010c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000c10  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000c10  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010c10  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017ab  00000000  00000000  00010c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000456  00000000  00000000  000123e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000150  00000000  00000000  00012840  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000118  00000000  00000000  00012990  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002070  00000000  00000000  00012aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001234  00000000  00000000  00014b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008fcf  00000000  00000000  00015d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001ed1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004a0  00000000  00000000  0001ed98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000be4 	.word	0x08000be4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000be4 	.word	0x08000be4

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <SPI2_GPIOInits>:
 */
#include "stm32f3xx.h"
#include<string.h>

void SPI2_GPIOInits(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80001ea:	4b11      	ldr	r3, [pc, #68]	; (8000230 <SPI2_GPIOInits+0x4c>)
 80001ec:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001ee:	2302      	movs	r3, #2
 80001f0:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80001f2:	2305      	movs	r3, #5
 80001f4:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001f6:	2300      	movs	r3, #0
 80001f8:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001fa:	2300      	movs	r3, #0
 80001fc:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80001fe:	2303      	movs	r3, #3
 8000200:	72bb      	strb	r3, [r7, #10]

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000202:	230c      	movs	r3, #12
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f9af 	bl	800056c <GPIO_Init>

	//CLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800020e:	230d      	movs	r3, #13
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f9a9 	bl	800056c <GPIO_Init>

//	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
//	GPIO_Init(&SPIPins);

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800021a:	230f      	movs	r3, #15
 800021c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f9a3 	bl	800056c <GPIO_Init>
}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	48000400 	.word	0x48000400

08000234 <GPIO_ButtonInit>:
void GPIO_ButtonInit(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0

	GPIO_Handle_t user;
	//PC13
	user.pGPIOx = GPIOC;
 800023a:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <GPIO_ButtonInit+0x34>)
 800023c:	607b      	str	r3, [r7, #4]
	user.GPIO_PinConfig.GPIO_PinNumber = 13;
 800023e:	230d      	movs	r3, #13
 8000240:	723b      	strb	r3, [r7, #8]
	user.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000242:	2300      	movs	r3, #0
 8000244:	727b      	strb	r3, [r7, #9]
	user.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000246:	2303      	movs	r3, #3
 8000248:	72bb      	strb	r3, [r7, #10]
	user.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800024a:	2300      	movs	r3, #0
 800024c:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClockControl(GPIOC, ENABLE);
 800024e:	2101      	movs	r1, #1
 8000250:	4805      	ldr	r0, [pc, #20]	; (8000268 <GPIO_ButtonInit+0x34>)
 8000252:	f000 f8bd 	bl	80003d0 <GPIO_PeriClockControl>

	GPIO_Init(&user);
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	4618      	mov	r0, r3
 800025a:	f000 f987 	bl	800056c <GPIO_Init>
}
 800025e:	bf00      	nop
 8000260:	3710      	adds	r7, #16
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	48000800 	.word	0x48000800

0800026c <SPI2_Inits>:
void SPI2_Inits(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 8000272:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <SPI2_Inits+0x38>)
 8000274:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000276:	2301      	movs	r3, #1
 8000278:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800027a:	2301      	movs	r3, #1
 800027c:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV4;
 800027e:	2301      	movs	r3, #1
 8000280:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000282:	2300      	movs	r3, #0
 8000284:	72fb      	strb	r3, [r7, #11]

	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000286:	2300      	movs	r3, #0
 8000288:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800028a:	2300      	movs	r3, #0
 800028c:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI;
 800028e:	2300      	movs	r3, #0
 8000290:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	4618      	mov	r0, r3
 8000296:	f000 fb85 	bl	80009a4 <SPI_Init>


}
 800029a:	bf00      	nop
 800029c:	3710      	adds	r7, #16
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40003800 	.word	0x40003800

080002a8 <delay>:
void delay(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<5000; i++)
 80002ae:	2300      	movs	r3, #0
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	e00b      	b.n	80002cc <delay+0x24>
		for(uint32_t j=0;j<50;j++);
 80002b4:	2300      	movs	r3, #0
 80002b6:	603b      	str	r3, [r7, #0]
 80002b8:	e002      	b.n	80002c0 <delay+0x18>
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	3301      	adds	r3, #1
 80002be:	603b      	str	r3, [r7, #0]
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	2b31      	cmp	r3, #49	; 0x31
 80002c4:	d9f9      	bls.n	80002ba <delay+0x12>
	for(uint32_t i=0;i<5000; i++)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	3301      	adds	r3, #1
 80002ca:	607b      	str	r3, [r7, #4]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f241 3287 	movw	r2, #4999	; 0x1387
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d9ee      	bls.n	80002b4 <delay+0xc>
}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr

080002e0 <main>:
int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
	char user_data[] = "Hello World";
 80002e6:	4a22      	ldr	r2, [pc, #136]	; (8000370 <main+0x90>)
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80002ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	GPIO_ButtonInit();
 80002f0:	f7ff ffa0 	bl	8000234 <GPIO_ButtonInit>

	SPI2_GPIOInits();
 80002f4:	f7ff ff76 	bl	80001e4 <SPI2_GPIOInits>

	SPI2_Inits();
 80002f8:	f7ff ffb8 	bl	800026c <SPI2_Inits>

	SPI_SSOEConfig(SPI2, ENABLE);
 80002fc:	2101      	movs	r1, #1
 80002fe:	481d      	ldr	r0, [pc, #116]	; (8000374 <main+0x94>)
 8000300:	f000 fc30 	bl	8000b64 <SPI_SSOEConfig>

	SPI_SSIConfig(SPI2,ENABLE);
 8000304:	2101      	movs	r1, #1
 8000306:	481b      	ldr	r0, [pc, #108]	; (8000374 <main+0x94>)
 8000308:	f000 fc11 	bl	8000b2e <SPI_SSIConfig>

	while(1){
		while( GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13));
 800030c:	bf00      	nop
 800030e:	210d      	movs	r1, #13
 8000310:	4819      	ldr	r0, [pc, #100]	; (8000378 <main+0x98>)
 8000312:	f000 fac1 	bl	8000898 <GPIO_ReadFromInputPin>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d1f8      	bne.n	800030e <main+0x2e>
		delay();
 800031c:	f7ff ffc4 	bl	80002a8 <delay>

		//SPI Peripheral needs to be enabled after configuration of spi
		SPI_PeripheralControl(SPI2, ENABLE);
 8000320:	2101      	movs	r1, #1
 8000322:	4814      	ldr	r0, [pc, #80]	; (8000374 <main+0x94>)
 8000324:	f000 fbe8 	bl	8000af8 <SPI_PeripheralControl>
		uint8_t dataLen = strlen(user_data);
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	4618      	mov	r0, r3
 800032c:	f7ff ff52 	bl	80001d4 <strlen>
 8000330:	4603      	mov	r3, r0
 8000332:	b2db      	uxtb	r3, r3
 8000334:	70fb      	strb	r3, [r7, #3]
		SPI_SendData(SPI2,&dataLen,1);
 8000336:	1cfb      	adds	r3, r7, #3
 8000338:	2201      	movs	r2, #1
 800033a:	4619      	mov	r1, r3
 800033c:	480d      	ldr	r0, [pc, #52]	; (8000374 <main+0x94>)
 800033e:	f000 fb9f 	bl	8000a80 <SPI_SendData>
		SPI_SendData(SPI2,(uint8_t *)user_data,strlen(user_data));
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ff45 	bl	80001d4 <strlen>
 800034a:	4602      	mov	r2, r0
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	4619      	mov	r1, r3
 8000350:	4808      	ldr	r0, [pc, #32]	; (8000374 <main+0x94>)
 8000352:	f000 fb95 	bl	8000a80 <SPI_SendData>
		while(SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG));
 8000356:	bf00      	nop
 8000358:	2180      	movs	r1, #128	; 0x80
 800035a:	4806      	ldr	r0, [pc, #24]	; (8000374 <main+0x94>)
 800035c:	f000 fb7d 	bl	8000a5a <SPI_GetFlagStatus>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d1f8      	bne.n	8000358 <main+0x78>
		SPI_PeripheralControl(SPI2, DISABLE);
 8000366:	2100      	movs	r1, #0
 8000368:	4802      	ldr	r0, [pc, #8]	; (8000374 <main+0x94>)
 800036a:	f000 fbc5 	bl	8000af8 <SPI_PeripheralControl>
	while(1){
 800036e:	e7cd      	b.n	800030c <main+0x2c>
 8000370:	08000bfc 	.word	0x08000bfc
 8000374:	40003800 	.word	0x40003800
 8000378:	48000800 	.word	0x48000800

0800037c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000380:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000384:	480c      	ldr	r0, [pc, #48]	; (80003b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000386:	490d      	ldr	r1, [pc, #52]	; (80003bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000388:	4a0d      	ldr	r2, [pc, #52]	; (80003c0 <LoopForever+0xe>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800038c:	e002      	b.n	8000394 <LoopCopyDataInit>

0800038e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000392:	3304      	adds	r3, #4

08000394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000398:	d3f9      	bcc.n	800038e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039a:	4a0a      	ldr	r2, [pc, #40]	; (80003c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800039c:	4c0a      	ldr	r4, [pc, #40]	; (80003c8 <LoopForever+0x16>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a0:	e001      	b.n	80003a6 <LoopFillZerobss>

080003a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a4:	3204      	adds	r2, #4

080003a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a8:	d3fb      	bcc.n	80003a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003aa:	f000 fbf7 	bl	8000b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ae:	f7ff ff97 	bl	80002e0 <main>

080003b2 <LoopForever>:

LoopForever:
    b LoopForever
 80003b2:	e7fe      	b.n	80003b2 <LoopForever>
  ldr   r0, =_estack
 80003b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80003b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003c0:	08000c10 	.word	0x08000c10
  ldr r2, =_sbss
 80003c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c8:	2000001c 	.word	0x2000001c

080003cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003cc:	e7fe      	b.n	80003cc <ADC1_2_IRQHandler>
	...

080003d0 <GPIO_PeriClockControl>:
 *@return		-	none
 *@note			- 	none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx,uint8_t EnorDi)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	460b      	mov	r3, r1
 80003da:	70fb      	strb	r3, [r7, #3]
	if(EnorDi==ENABLE)
 80003dc:	78fb      	ldrb	r3, [r7, #3]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d157      	bne.n	8000492 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx==GPIOA)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80003e8:	d106      	bne.n	80003f8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80003ea:	4b58      	ldr	r3, [pc, #352]	; (800054c <GPIO_PeriClockControl+0x17c>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	4a57      	ldr	r2, [pc, #348]	; (800054c <GPIO_PeriClockControl+0x17c>)
 80003f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003f4:	6153      	str	r3, [r2, #20]
		else if(pGPIOx==GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 80003f6:	e0a3      	b.n	8000540 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOB)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4a55      	ldr	r2, [pc, #340]	; (8000550 <GPIO_PeriClockControl+0x180>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d106      	bne.n	800040e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000400:	4b52      	ldr	r3, [pc, #328]	; (800054c <GPIO_PeriClockControl+0x17c>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	4a51      	ldr	r2, [pc, #324]	; (800054c <GPIO_PeriClockControl+0x17c>)
 8000406:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800040a:	6153      	str	r3, [r2, #20]
}
 800040c:	e098      	b.n	8000540 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOC)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4a50      	ldr	r2, [pc, #320]	; (8000554 <GPIO_PeriClockControl+0x184>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d106      	bne.n	8000424 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000416:	4b4d      	ldr	r3, [pc, #308]	; (800054c <GPIO_PeriClockControl+0x17c>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a4c      	ldr	r2, [pc, #304]	; (800054c <GPIO_PeriClockControl+0x17c>)
 800041c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000420:	6153      	str	r3, [r2, #20]
}
 8000422:	e08d      	b.n	8000540 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOD)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a4c      	ldr	r2, [pc, #304]	; (8000558 <GPIO_PeriClockControl+0x188>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d106      	bne.n	800043a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800042c:	4b47      	ldr	r3, [pc, #284]	; (800054c <GPIO_PeriClockControl+0x17c>)
 800042e:	695b      	ldr	r3, [r3, #20]
 8000430:	4a46      	ldr	r2, [pc, #280]	; (800054c <GPIO_PeriClockControl+0x17c>)
 8000432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000436:	6153      	str	r3, [r2, #20]
}
 8000438:	e082      	b.n	8000540 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOE)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a47      	ldr	r2, [pc, #284]	; (800055c <GPIO_PeriClockControl+0x18c>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d106      	bne.n	8000450 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000442:	4b42      	ldr	r3, [pc, #264]	; (800054c <GPIO_PeriClockControl+0x17c>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4a41      	ldr	r2, [pc, #260]	; (800054c <GPIO_PeriClockControl+0x17c>)
 8000448:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800044c:	6153      	str	r3, [r2, #20]
}
 800044e:	e077      	b.n	8000540 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOF)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a43      	ldr	r2, [pc, #268]	; (8000560 <GPIO_PeriClockControl+0x190>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d106      	bne.n	8000466 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000458:	4b3c      	ldr	r3, [pc, #240]	; (800054c <GPIO_PeriClockControl+0x17c>)
 800045a:	695b      	ldr	r3, [r3, #20]
 800045c:	4a3b      	ldr	r2, [pc, #236]	; (800054c <GPIO_PeriClockControl+0x17c>)
 800045e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000462:	6153      	str	r3, [r2, #20]
}
 8000464:	e06c      	b.n	8000540 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOG)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a3e      	ldr	r2, [pc, #248]	; (8000564 <GPIO_PeriClockControl+0x194>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d106      	bne.n	800047c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800046e:	4b37      	ldr	r3, [pc, #220]	; (800054c <GPIO_PeriClockControl+0x17c>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a36      	ldr	r2, [pc, #216]	; (800054c <GPIO_PeriClockControl+0x17c>)
 8000474:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000478:	6153      	str	r3, [r2, #20]
}
 800047a:	e061      	b.n	8000540 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOH)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a3a      	ldr	r2, [pc, #232]	; (8000568 <GPIO_PeriClockControl+0x198>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d15d      	bne.n	8000540 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000484:	4b31      	ldr	r3, [pc, #196]	; (800054c <GPIO_PeriClockControl+0x17c>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	4a30      	ldr	r2, [pc, #192]	; (800054c <GPIO_PeriClockControl+0x17c>)
 800048a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800048e:	6153      	str	r3, [r2, #20]
}
 8000490:	e056      	b.n	8000540 <GPIO_PeriClockControl+0x170>
		if(pGPIOx==GPIOA)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000498:	d106      	bne.n	80004a8 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 800049a:	4b2c      	ldr	r3, [pc, #176]	; (800054c <GPIO_PeriClockControl+0x17c>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	4a2b      	ldr	r2, [pc, #172]	; (800054c <GPIO_PeriClockControl+0x17c>)
 80004a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80004a4:	6153      	str	r3, [r2, #20]
}
 80004a6:	e04b      	b.n	8000540 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOB)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a29      	ldr	r2, [pc, #164]	; (8000550 <GPIO_PeriClockControl+0x180>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d106      	bne.n	80004be <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80004b0:	4b26      	ldr	r3, [pc, #152]	; (800054c <GPIO_PeriClockControl+0x17c>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	4a25      	ldr	r2, [pc, #148]	; (800054c <GPIO_PeriClockControl+0x17c>)
 80004b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004ba:	6153      	str	r3, [r2, #20]
}
 80004bc:	e040      	b.n	8000540 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOC)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4a24      	ldr	r2, [pc, #144]	; (8000554 <GPIO_PeriClockControl+0x184>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d106      	bne.n	80004d4 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80004c6:	4b21      	ldr	r3, [pc, #132]	; (800054c <GPIO_PeriClockControl+0x17c>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	4a20      	ldr	r2, [pc, #128]	; (800054c <GPIO_PeriClockControl+0x17c>)
 80004cc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80004d0:	6153      	str	r3, [r2, #20]
}
 80004d2:	e035      	b.n	8000540 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOD)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4a20      	ldr	r2, [pc, #128]	; (8000558 <GPIO_PeriClockControl+0x188>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d106      	bne.n	80004ea <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80004dc:	4b1b      	ldr	r3, [pc, #108]	; (800054c <GPIO_PeriClockControl+0x17c>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	4a1a      	ldr	r2, [pc, #104]	; (800054c <GPIO_PeriClockControl+0x17c>)
 80004e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80004e6:	6153      	str	r3, [r2, #20]
}
 80004e8:	e02a      	b.n	8000540 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOE)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4a1b      	ldr	r2, [pc, #108]	; (800055c <GPIO_PeriClockControl+0x18c>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d106      	bne.n	8000500 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80004f2:	4b16      	ldr	r3, [pc, #88]	; (800054c <GPIO_PeriClockControl+0x17c>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	4a15      	ldr	r2, [pc, #84]	; (800054c <GPIO_PeriClockControl+0x17c>)
 80004f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80004fc:	6153      	str	r3, [r2, #20]
}
 80004fe:	e01f      	b.n	8000540 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOF)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4a17      	ldr	r2, [pc, #92]	; (8000560 <GPIO_PeriClockControl+0x190>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d106      	bne.n	8000516 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000508:	4b10      	ldr	r3, [pc, #64]	; (800054c <GPIO_PeriClockControl+0x17c>)
 800050a:	695b      	ldr	r3, [r3, #20]
 800050c:	4a0f      	ldr	r2, [pc, #60]	; (800054c <GPIO_PeriClockControl+0x17c>)
 800050e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000512:	6153      	str	r3, [r2, #20]
}
 8000514:	e014      	b.n	8000540 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOG)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4a12      	ldr	r2, [pc, #72]	; (8000564 <GPIO_PeriClockControl+0x194>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d106      	bne.n	800052c <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 800051e:	4b0b      	ldr	r3, [pc, #44]	; (800054c <GPIO_PeriClockControl+0x17c>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a0a      	ldr	r2, [pc, #40]	; (800054c <GPIO_PeriClockControl+0x17c>)
 8000524:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000528:	6153      	str	r3, [r2, #20]
}
 800052a:	e009      	b.n	8000540 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOH)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <GPIO_PeriClockControl+0x198>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d105      	bne.n	8000540 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <GPIO_PeriClockControl+0x17c>)
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <GPIO_PeriClockControl+0x17c>)
 800053a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800053e:	6153      	str	r3, [r2, #20]
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000
 8000550:	48000400 	.word	0x48000400
 8000554:	48000800 	.word	0x48000800
 8000558:	48000c00 	.word	0x48000c00
 800055c:	48001000 	.word	0x48001000
 8000560:	48001400 	.word	0x48001400
 8000564:	48001800 	.word	0x48001800
 8000568:	48001c00 	.word	0x48001c00

0800056c <GPIO_Init>:
 *@return		-	none
 *@note	-
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;  // temp register
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]

	//Enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2101      	movs	r1, #1
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff ff26 	bl	80003d0 <GPIO_PeriClockControl>

	//1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_ANALOG){
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	795b      	ldrb	r3, [r3, #5]
 8000588:	2b03      	cmp	r3, #3
 800058a:	d820      	bhi.n	80005ce <GPIO_Init+0x62>
		//non interrupt mode
		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	795b      	ldrb	r3, [r3, #5]
 8000590:	461a      	mov	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	791b      	ldrb	r3, [r3, #4]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	fa02 f303 	lsl.w	r3, r2, r3
 800059c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));		//clearing
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	791b      	ldrb	r3, [r3, #4]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	2103      	movs	r1, #3
 80005ac:	fa01 f303 	lsl.w	r3, r1, r3
 80005b0:	43db      	mvns	r3, r3
 80005b2:	4619      	mov	r1, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	400a      	ands	r2, r1
 80005ba:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;			//setting
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	6819      	ldr	r1, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	697a      	ldr	r2, [r7, #20]
 80005c8:	430a      	orrs	r2, r1
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	e0bf      	b.n	800074e <GPIO_Init+0x1e2>
		 * 2. Configure the edge trigger
		 *	// watch notes for more points, am no able to understand as of now
		 */

		//1. Configure either FTSR or RTSR register
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	795b      	ldrb	r3, [r3, #5]
 80005d2:	2b04      	cmp	r3, #4
 80005d4:	d117      	bne.n	8000606 <GPIO_Init+0x9a>
			//configure for falling edge interrupt || register is FTSR
			EXTI->FTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);				//setting up the falling trigger selection register
 80005d6:	4b47      	ldr	r3, [pc, #284]	; (80006f4 <GPIO_Init+0x188>)
 80005d8:	68db      	ldr	r3, [r3, #12]
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	7912      	ldrb	r2, [r2, #4]
 80005de:	4611      	mov	r1, r2
 80005e0:	2201      	movs	r2, #1
 80005e2:	408a      	lsls	r2, r1
 80005e4:	4611      	mov	r1, r2
 80005e6:	4a43      	ldr	r2, [pc, #268]	; (80006f4 <GPIO_Init+0x188>)
 80005e8:	430b      	orrs	r3, r1
 80005ea:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);			//resetting rising trigger selection register
 80005ec:	4b41      	ldr	r3, [pc, #260]	; (80006f4 <GPIO_Init+0x188>)
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	7912      	ldrb	r2, [r2, #4]
 80005f4:	4611      	mov	r1, r2
 80005f6:	2201      	movs	r2, #1
 80005f8:	408a      	lsls	r2, r1
 80005fa:	43d2      	mvns	r2, r2
 80005fc:	4611      	mov	r1, r2
 80005fe:	4a3d      	ldr	r2, [pc, #244]	; (80006f4 <GPIO_Init+0x188>)
 8000600:	400b      	ands	r3, r1
 8000602:	6093      	str	r3, [r2, #8]
 8000604:	e035      	b.n	8000672 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	795b      	ldrb	r3, [r3, #5]
 800060a:	2b05      	cmp	r3, #5
 800060c:	d117      	bne.n	800063e <GPIO_Init+0xd2>
			//configure rising edge interrupt		|| register is RTSR
			EXTI->RTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800060e:	4b39      	ldr	r3, [pc, #228]	; (80006f4 <GPIO_Init+0x188>)
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	7912      	ldrb	r2, [r2, #4]
 8000616:	4611      	mov	r1, r2
 8000618:	2201      	movs	r2, #1
 800061a:	408a      	lsls	r2, r1
 800061c:	4611      	mov	r1, r2
 800061e:	4a35      	ldr	r2, [pc, #212]	; (80006f4 <GPIO_Init+0x188>)
 8000620:	430b      	orrs	r3, r1
 8000622:	6093      	str	r3, [r2, #8]
			EXTI->FTSR1 &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000624:	4b33      	ldr	r3, [pc, #204]	; (80006f4 <GPIO_Init+0x188>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	7912      	ldrb	r2, [r2, #4]
 800062c:	4611      	mov	r1, r2
 800062e:	2201      	movs	r2, #1
 8000630:	408a      	lsls	r2, r1
 8000632:	43d2      	mvns	r2, r2
 8000634:	4611      	mov	r1, r2
 8000636:	4a2f      	ldr	r2, [pc, #188]	; (80006f4 <GPIO_Init+0x188>)
 8000638:	400b      	ands	r3, r1
 800063a:	60d3      	str	r3, [r2, #12]
 800063c:	e019      	b.n	8000672 <GPIO_Init+0x106>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	795b      	ldrb	r3, [r3, #5]
 8000642:	2b06      	cmp	r3, #6
 8000644:	d115      	bne.n	8000672 <GPIO_Init+0x106>
			//configure for both		|| both FTSR and RTSR
			EXTI->FTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000646:	4b2b      	ldr	r3, [pc, #172]	; (80006f4 <GPIO_Init+0x188>)
 8000648:	68db      	ldr	r3, [r3, #12]
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	7912      	ldrb	r2, [r2, #4]
 800064e:	4611      	mov	r1, r2
 8000650:	2201      	movs	r2, #1
 8000652:	408a      	lsls	r2, r1
 8000654:	4611      	mov	r1, r2
 8000656:	4a27      	ldr	r2, [pc, #156]	; (80006f4 <GPIO_Init+0x188>)
 8000658:	430b      	orrs	r3, r1
 800065a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <GPIO_Init+0x188>)
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	7912      	ldrb	r2, [r2, #4]
 8000664:	4611      	mov	r1, r2
 8000666:	2201      	movs	r2, #1
 8000668:	408a      	lsls	r2, r1
 800066a:	4611      	mov	r1, r2
 800066c:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <GPIO_Init+0x188>)
 800066e:	430b      	orrs	r3, r1
 8000670:	6093      	str	r3, [r2, #8]
		}

		//2. configure the GPIO port selection in SYSCNFG_EXTICR
		//we have to make 2 temp variables one will store the index with dividing by4
		// and the other will hold value with %4
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	089b      	lsrs	r3, r3, #2
 8000678:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	791b      	ldrb	r3, [r3, #4]
 800067e:	f003 0303 	and.w	r3, r3, #3
 8000682:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800068c:	d042      	beq.n	8000714 <GPIO_Init+0x1a8>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a19      	ldr	r2, [pc, #100]	; (80006f8 <GPIO_Init+0x18c>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d02b      	beq.n	80006f0 <GPIO_Init+0x184>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a17      	ldr	r2, [pc, #92]	; (80006fc <GPIO_Init+0x190>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d024      	beq.n	80006ec <GPIO_Init+0x180>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a16      	ldr	r2, [pc, #88]	; (8000700 <GPIO_Init+0x194>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d01d      	beq.n	80006e8 <GPIO_Init+0x17c>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a14      	ldr	r2, [pc, #80]	; (8000704 <GPIO_Init+0x198>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d016      	beq.n	80006e4 <GPIO_Init+0x178>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a13      	ldr	r2, [pc, #76]	; (8000708 <GPIO_Init+0x19c>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d00f      	beq.n	80006e0 <GPIO_Init+0x174>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a11      	ldr	r2, [pc, #68]	; (800070c <GPIO_Init+0x1a0>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d008      	beq.n	80006dc <GPIO_Init+0x170>
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a10      	ldr	r2, [pc, #64]	; (8000710 <GPIO_Init+0x1a4>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d101      	bne.n	80006d8 <GPIO_Init+0x16c>
 80006d4:	2307      	movs	r3, #7
 80006d6:	e01e      	b.n	8000716 <GPIO_Init+0x1aa>
 80006d8:	2300      	movs	r3, #0
 80006da:	e01c      	b.n	8000716 <GPIO_Init+0x1aa>
 80006dc:	2306      	movs	r3, #6
 80006de:	e01a      	b.n	8000716 <GPIO_Init+0x1aa>
 80006e0:	2305      	movs	r3, #5
 80006e2:	e018      	b.n	8000716 <GPIO_Init+0x1aa>
 80006e4:	2304      	movs	r3, #4
 80006e6:	e016      	b.n	8000716 <GPIO_Init+0x1aa>
 80006e8:	2303      	movs	r3, #3
 80006ea:	e014      	b.n	8000716 <GPIO_Init+0x1aa>
 80006ec:	2302      	movs	r3, #2
 80006ee:	e012      	b.n	8000716 <GPIO_Init+0x1aa>
 80006f0:	2301      	movs	r3, #1
 80006f2:	e010      	b.n	8000716 <GPIO_Init+0x1aa>
 80006f4:	40010400 	.word	0x40010400
 80006f8:	48000400 	.word	0x48000400
 80006fc:	48000800 	.word	0x48000800
 8000700:	48000c00 	.word	0x48000c00
 8000704:	48001000 	.word	0x48001000
 8000708:	48001400 	.word	0x48001400
 800070c:	48001800 	.word	0x48001800
 8000710:	48001c00 	.word	0x48001c00
 8000714:	2300      	movs	r3, #0
 8000716:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000718:	4b5c      	ldr	r3, [pc, #368]	; (800088c <GPIO_Init+0x320>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a5b      	ldr	r2, [pc, #364]	; (800088c <GPIO_Init+0x320>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	6193      	str	r3, [r2, #24]
		SYSCFG->EXTICR[temp1] = portcode <<(temp2 * 4);
 8000724:	7c7a      	ldrb	r2, [r7, #17]
 8000726:	7cbb      	ldrb	r3, [r7, #18]
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	fa02 f103 	lsl.w	r1, r2, r3
 800072e:	4a58      	ldr	r2, [pc, #352]	; (8000890 <GPIO_Init+0x324>)
 8000730:	7cfb      	ldrb	r3, [r7, #19]
 8000732:	3302      	adds	r3, #2
 8000734:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		//3. enable the exti interrupt delievery using IMR
		EXTI->IMR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000738:	4b56      	ldr	r3, [pc, #344]	; (8000894 <GPIO_Init+0x328>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	7912      	ldrb	r2, [r2, #4]
 8000740:	4611      	mov	r1, r2
 8000742:	2201      	movs	r2, #1
 8000744:	408a      	lsls	r2, r1
 8000746:	4611      	mov	r1, r2
 8000748:	4a52      	ldr	r2, [pc, #328]	; (8000894 <GPIO_Init+0x328>)
 800074a:	430b      	orrs	r3, r1
 800074c:	6013      	str	r3, [r2, #0]
	}
	//2. configure the speed
	temp=0;
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	799b      	ldrb	r3, [r3, #6]
 8000756:	461a      	mov	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	689a      	ldr	r2, [r3, #8]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	791b      	ldrb	r3, [r3, #4]
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	2103      	movs	r1, #3
 8000772:	fa01 f303 	lsl.w	r3, r1, r3
 8000776:	43db      	mvns	r3, r3
 8000778:	4619      	mov	r1, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	400a      	ands	r2, r1
 8000780:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	6899      	ldr	r1, [r3, #8]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	697a      	ldr	r2, [r7, #20]
 800078e:	430a      	orrs	r2, r1
 8000790:	609a      	str	r2, [r3, #8]

	//3. configure the pupd setting
	temp=0;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	79db      	ldrb	r3, [r3, #7]
 800079a:	461a      	mov	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	791b      	ldrb	r3, [r3, #4]
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	68da      	ldr	r2, [r3, #12]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	791b      	ldrb	r3, [r3, #4]
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	2103      	movs	r1, #3
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	43db      	mvns	r3, r3
 80007bc:	4619      	mov	r1, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	400a      	ands	r2, r1
 80007c4:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	68d9      	ldr	r1, [r3, #12]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	697a      	ldr	r2, [r7, #20]
 80007d2:	430a      	orrs	r2, r1
 80007d4:	60da      	str	r2, [r3, #12]
	//4. configure the optype
	temp=0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	7a1b      	ldrb	r3, [r3, #8]
 80007de:	461a      	mov	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	791b      	ldrb	r3, [r3, #4]
 80007e4:	fa02 f303 	lsl.w	r3, r2, r3
 80007e8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	685a      	ldr	r2, [r3, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	791b      	ldrb	r3, [r3, #4]
 80007f4:	4619      	mov	r1, r3
 80007f6:	2301      	movs	r3, #1
 80007f8:	408b      	lsls	r3, r1
 80007fa:	43db      	mvns	r3, r3
 80007fc:	4619      	mov	r1, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	400a      	ands	r2, r1
 8000804:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	6859      	ldr	r1, [r3, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	697a      	ldr	r2, [r7, #20]
 8000812:	430a      	orrs	r2, r1
 8000814:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	795b      	ldrb	r3, [r3, #5]
 800081a:	2b02      	cmp	r3, #2
 800081c:	d131      	bne.n	8000882 <GPIO_Init+0x316>
		//configure the alt functionality
		// the course does not clear the alt functionality registers
		// it only sets them assuming initial state to be zero
		uint8_t temp1, temp2;
		temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	791b      	ldrb	r3, [r3, #4]
 8000822:	08db      	lsrs	r3, r3, #3
 8000824:	743b      	strb	r3, [r7, #16]
		temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	791b      	ldrb	r3, [r3, #4]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4*temp2));
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	7c3a      	ldrb	r2, [r7, #16]
 8000836:	3208      	adds	r2, #8
 8000838:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	220f      	movs	r2, #15
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	43db      	mvns	r3, r3
 8000848:	4618      	mov	r0, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	7c3a      	ldrb	r2, [r7, #16]
 8000850:	4001      	ands	r1, r0
 8000852:	3208      	adds	r2, #8
 8000854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	7c3a      	ldrb	r2, [r7, #16]
 800085e:	3208      	adds	r2, #8
 8000860:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	7a5b      	ldrb	r3, [r3, #9]
 8000868:	461a      	mov	r2, r3
 800086a:	7bfb      	ldrb	r3, [r7, #15]
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	4618      	mov	r0, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	7c3a      	ldrb	r2, [r7, #16]
 800087a:	4301      	orrs	r1, r0
 800087c:	3208      	adds	r2, #8
 800087e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000
 8000890:	40010000 	.word	0x40010000
 8000894:	40010400 	.word	0x40010400

08000898 <GPIO_ReadFromInputPin>:

/*
 * read and write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	460b      	mov	r3, r1
 80008a2:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value= (uint8_t)((pGPIOx->IDR>>PinNumber) & 0x00000001);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	691a      	ldr	r2, [r3, #16]
 80008a8:	78fb      	ldrb	r3, [r7, #3]
 80008aa:	fa22 f303 	lsr.w	r3, r2, r3
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	73fb      	strb	r3, [r7, #15]
	return value;
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
	...

080008c4 <SPI_PeriClockControl>:

/*
 * clock control
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx,uint8_t EnorDi)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	70fb      	strb	r3, [r7, #3]
	if(EnorDi==ENABLE)
 80008d0:	78fb      	ldrb	r3, [r7, #3]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d12b      	bne.n	800092e <SPI_PeriClockControl+0x6a>
	{
		if(pSPIx==SPI1)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a2d      	ldr	r2, [pc, #180]	; (8000990 <SPI_PeriClockControl+0xcc>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d106      	bne.n	80008ec <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 80008de:	4b2d      	ldr	r3, [pc, #180]	; (8000994 <SPI_PeriClockControl+0xd0>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	4a2c      	ldr	r2, [pc, #176]	; (8000994 <SPI_PeriClockControl+0xd0>)
 80008e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008e8:	6193      	str	r3, [r2, #24]
		else if(pSPIx==SPI4)
		{
			SPI4_PCLK_DI();
		}
	}
}
 80008ea:	e04b      	b.n	8000984 <SPI_PeriClockControl+0xc0>
		else if(pSPIx==SPI2)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a2a      	ldr	r2, [pc, #168]	; (8000998 <SPI_PeriClockControl+0xd4>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d106      	bne.n	8000902 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80008f4:	4b27      	ldr	r3, [pc, #156]	; (8000994 <SPI_PeriClockControl+0xd0>)
 80008f6:	69db      	ldr	r3, [r3, #28]
 80008f8:	4a26      	ldr	r2, [pc, #152]	; (8000994 <SPI_PeriClockControl+0xd0>)
 80008fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008fe:	61d3      	str	r3, [r2, #28]
}
 8000900:	e040      	b.n	8000984 <SPI_PeriClockControl+0xc0>
		else if(pSPIx==SPI3)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4a25      	ldr	r2, [pc, #148]	; (800099c <SPI_PeriClockControl+0xd8>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d106      	bne.n	8000918 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 800090a:	4b22      	ldr	r3, [pc, #136]	; (8000994 <SPI_PeriClockControl+0xd0>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	4a21      	ldr	r2, [pc, #132]	; (8000994 <SPI_PeriClockControl+0xd0>)
 8000910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000914:	61d3      	str	r3, [r2, #28]
}
 8000916:	e035      	b.n	8000984 <SPI_PeriClockControl+0xc0>
		else if(pSPIx==SPI4)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a21      	ldr	r2, [pc, #132]	; (80009a0 <SPI_PeriClockControl+0xdc>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d131      	bne.n	8000984 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_EN();
 8000920:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <SPI_PeriClockControl+0xd0>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4a1b      	ldr	r2, [pc, #108]	; (8000994 <SPI_PeriClockControl+0xd0>)
 8000926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800092a:	6193      	str	r3, [r2, #24]
}
 800092c:	e02a      	b.n	8000984 <SPI_PeriClockControl+0xc0>
		if(pSPIx==SPI1)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a17      	ldr	r2, [pc, #92]	; (8000990 <SPI_PeriClockControl+0xcc>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d106      	bne.n	8000944 <SPI_PeriClockControl+0x80>
			SPI1_PCLK_DI();
 8000936:	4b17      	ldr	r3, [pc, #92]	; (8000994 <SPI_PeriClockControl+0xd0>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	4a16      	ldr	r2, [pc, #88]	; (8000994 <SPI_PeriClockControl+0xd0>)
 800093c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000940:	6193      	str	r3, [r2, #24]
}
 8000942:	e01f      	b.n	8000984 <SPI_PeriClockControl+0xc0>
		else if(pSPIx==SPI2)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a14      	ldr	r2, [pc, #80]	; (8000998 <SPI_PeriClockControl+0xd4>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d106      	bne.n	800095a <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DI();
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <SPI_PeriClockControl+0xd0>)
 800094e:	69db      	ldr	r3, [r3, #28]
 8000950:	4a10      	ldr	r2, [pc, #64]	; (8000994 <SPI_PeriClockControl+0xd0>)
 8000952:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000956:	61d3      	str	r3, [r2, #28]
}
 8000958:	e014      	b.n	8000984 <SPI_PeriClockControl+0xc0>
		else if(pSPIx==SPI3)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a0f      	ldr	r2, [pc, #60]	; (800099c <SPI_PeriClockControl+0xd8>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d106      	bne.n	8000970 <SPI_PeriClockControl+0xac>
			SPI3_PCLK_DI();
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <SPI_PeriClockControl+0xd0>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <SPI_PeriClockControl+0xd0>)
 8000968:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800096c:	61d3      	str	r3, [r2, #28]
}
 800096e:	e009      	b.n	8000984 <SPI_PeriClockControl+0xc0>
		else if(pSPIx==SPI4)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <SPI_PeriClockControl+0xdc>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d105      	bne.n	8000984 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_DI();
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <SPI_PeriClockControl+0xd0>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a05      	ldr	r2, [pc, #20]	; (8000994 <SPI_PeriClockControl+0xd0>)
 800097e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000982:	6193      	str	r3, [r2, #24]
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40013000 	.word	0x40013000
 8000994:	40021000 	.word	0x40021000
 8000998:	40003800 	.word	0x40003800
 800099c:	40003c00 	.word	0x40003c00
 80009a0:	40013c00 	.word	0x40013c00

080009a4 <SPI_Init>:
/*
 * Init and de-init
 */

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	//first lets configure the SPI_CR1 register
	uint32_t tempreg = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2101      	movs	r1, #1
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ff84 	bl	80008c4 <SPI_PeriClockControl>
		pSPIHandle->pSPIx->CR1 |= (1<<2);
	}
	else if(pSPIHandle->SPIConfig.SPI_DeviceMode == 0){
		pSPIHandle->pSPIx->CR1 &= ~(1<<2);
	}*/
	tempreg |= (pSPIHandle->SPIConfig.SPI_DeviceMode << 2);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	791b      	ldrb	r3, [r3, #4]
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	461a      	mov	r2, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	60fb      	str	r3, [r7, #12]
	//2. Configure the bus config
	// full duplex
	// bidimode = 0
	// rxonly = 0

	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	795b      	ldrb	r3, [r3, #5]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d104      	bne.n	80009dc <SPI_Init+0x38>
		// bidimode = 0, bidioe =  and rx only = 0
		tempreg &= ~(1<<15);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	e014      	b.n	8000a06 <SPI_Init+0x62>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	795b      	ldrb	r3, [r3, #5]
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d104      	bne.n	80009ee <SPI_Init+0x4a>
		// bidimode = 1, bidioe =  and rx only =0
		tempreg |= (1<<15);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	e00b      	b.n	8000a06 <SPI_Init+0x62>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	795b      	ldrb	r3, [r3, #5]
 80009f2:	2b03      	cmp	r3, #3
 80009f4:	d107      	bne.n	8000a06 <SPI_Init+0x62>
		// bidimode = 0, bidioe = 0 and rx only = 1
		tempreg &= ~(1<<15);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009fc:	60fb      	str	r3, [r7, #12]
		tempreg |= (1<<15);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a04:	60fb      	str	r3, [r7, #12]
	}

	//3. Initialise the clock speed
	tempreg |= (pSPIHandle->SPIConfig.SPI_SclkSpeed <<3);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	799b      	ldrb	r3, [r3, #6]
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]

	//4. Bit length
	tempreg |= (pSPIHandle->SPIConfig.SPI_DFF << 11);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	79db      	ldrb	r3, [r3, #7]
 8000a18:	02db      	lsls	r3, r3, #11
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]

	//5. Initialise CPOL and CPHA
	tempreg |= (pSPIHandle->SPIConfig.SPI_CPOL<<1);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	7a1b      	ldrb	r3, [r3, #8]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	461a      	mov	r2, r3
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
	tempreg |= (pSPIHandle->SPIConfig.SPI_CPHA<<0);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	7a5b      	ldrb	r3, [r3, #9]
 8000a34:	461a      	mov	r2, r3
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	60fb      	str	r3, [r7, #12]

	//SPI_CR2(SPI2) |= SPI_CR2_SSOE;
	tempreg |= (pSPIHandle->SPIConfig.SPI_SSM<<SPI_CR1_SSM);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	7a9b      	ldrb	r3, [r3, #10]
 8000a40:	025b      	lsls	r3, r3, #9
 8000a42:	461a      	mov	r2, r3
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	60fb      	str	r3, [r7, #12]



	pSPIHandle->pSPIx->CR1 = tempreg;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	601a      	str	r2, [r3, #0]


	//pSPIHandle->pSPIx->CR2 |= (1<<)
}
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <SPI_GetFlagStatus>:
		SPI4_REG_RESET();
	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx,uint32_t FlagName)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b083      	sub	sp, #12
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName){
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	689a      	ldr	r2, [r3, #8]
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000a70:	2301      	movs	r3, #1
 8000a72:	e000      	b.n	8000a76 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <SPI_SendData>:
/*
 * Data send and recieve
 */
void SPI_SendData (SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer,uint32_t Len)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
	SPI_PeripheralControl(SPI2, ENABLE);
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	4819      	ldr	r0, [pc, #100]	; (8000af4 <SPI_SendData+0x74>)
 8000a90:	f000 f832 	bl	8000af8 <SPI_PeripheralControl>
	while(Len>0){
 8000a94:	e027      	b.n	8000ae6 <SPI_SendData+0x66>
		//1. wait until TXE is set
		//while(!(pSPIx->SR &(1<<1)));
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG) == FLAG_RESET);
 8000a96:	bf00      	nop
 8000a98:	2102      	movs	r1, #2
 8000a9a:	68f8      	ldr	r0, [r7, #12]
 8000a9c:	f7ff ffdd 	bl	8000a5a <SPI_GetFlagStatus>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d0f8      	beq.n	8000a98 <SPI_SendData+0x18>

		//2. check DFF bit in CR1
		if(pSPIx->CR1 & (1<<SPI_CR1_DFF)){
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d00e      	beq.n	8000ad0 <SPI_SendData+0x50>
			//16 bit dff
			//1. load the data into the DR
			pSPIx->DR = *((uint16_t*) pTxBuffer);
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	60da      	str	r2, [r3, #12]
			Len--;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	607b      	str	r3, [r7, #4]
			Len--;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	3301      	adds	r3, #1
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	e00a      	b.n	8000ae6 <SPI_SendData+0x66>
		}
		else{
			//without volatile the bits sent are 8 bit, however clock is generated for 16 bit
			(*(volatile uint8_t *)&pSPIx->DR) = *pTxBuffer;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	330c      	adds	r3, #12
 8000ad4:	68ba      	ldr	r2, [r7, #8]
 8000ad6:	7812      	ldrb	r2, [r2, #0]
 8000ad8:	701a      	strb	r2, [r3, #0]
			Len--;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3b01      	subs	r3, #1
 8000ade:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	60bb      	str	r3, [r7, #8]
	while(Len>0){
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d1d4      	bne.n	8000a96 <SPI_SendData+0x16>
		}
	}
}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40003800 	.word	0x40003800

08000af8 <SPI_PeripheralControl>:
{

}

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == 1)
 8000b04:	78fb      	ldrb	r3, [r7, #3]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d106      	bne.n	8000b18 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1<<SPI_CR1_SPE);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	601a      	str	r2, [r3, #0]
	else
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
}
 8000b16:	e005      	b.n	8000b24 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	601a      	str	r2, [r3, #0]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr

08000b2e <SPI_SSIConfig>:


void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	460b      	mov	r3, r1
 8000b38:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == 1)
 8000b3a:	78fb      	ldrb	r3, [r7, #3]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d106      	bne.n	8000b4e <SPI_SSIConfig+0x20>
		pSPIx->CR1 |= (1<<SPI_CR1_SSI);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	601a      	str	r2, [r3, #0]
	else
		pSPIx->CR1 &= ~(1<<SPI_CR1_SSI);
}
 8000b4c:	e005      	b.n	8000b5a <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &= ~(1<<SPI_CR1_SSI);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	601a      	str	r2, [r3, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr

08000b64 <SPI_SSOEConfig>:

void SPI_SSOEConfig (SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == 1)
 8000b70:	78fb      	ldrb	r3, [r7, #3]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d106      	bne.n	8000b84 <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |= (1<<SPI_CR2_SSOE);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f043 0204 	orr.w	r2, r3, #4
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	605a      	str	r2, [r3, #4]
	else
		pSPIx->CR2 &= ~(1<<SPI_CR2_SSOE);
}
 8000b82:	e005      	b.n	8000b90 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1<<SPI_CR2_SSOE);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f023 0204 	bic.w	r2, r3, #4
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	605a      	str	r2, [r3, #4]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
	...

08000b9c <__libc_init_array>:
 8000b9c:	b570      	push	{r4, r5, r6, lr}
 8000b9e:	4e0d      	ldr	r6, [pc, #52]	; (8000bd4 <__libc_init_array+0x38>)
 8000ba0:	4c0d      	ldr	r4, [pc, #52]	; (8000bd8 <__libc_init_array+0x3c>)
 8000ba2:	1ba4      	subs	r4, r4, r6
 8000ba4:	10a4      	asrs	r4, r4, #2
 8000ba6:	2500      	movs	r5, #0
 8000ba8:	42a5      	cmp	r5, r4
 8000baa:	d109      	bne.n	8000bc0 <__libc_init_array+0x24>
 8000bac:	4e0b      	ldr	r6, [pc, #44]	; (8000bdc <__libc_init_array+0x40>)
 8000bae:	4c0c      	ldr	r4, [pc, #48]	; (8000be0 <__libc_init_array+0x44>)
 8000bb0:	f000 f818 	bl	8000be4 <_init>
 8000bb4:	1ba4      	subs	r4, r4, r6
 8000bb6:	10a4      	asrs	r4, r4, #2
 8000bb8:	2500      	movs	r5, #0
 8000bba:	42a5      	cmp	r5, r4
 8000bbc:	d105      	bne.n	8000bca <__libc_init_array+0x2e>
 8000bbe:	bd70      	pop	{r4, r5, r6, pc}
 8000bc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bc4:	4798      	blx	r3
 8000bc6:	3501      	adds	r5, #1
 8000bc8:	e7ee      	b.n	8000ba8 <__libc_init_array+0xc>
 8000bca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bce:	4798      	blx	r3
 8000bd0:	3501      	adds	r5, #1
 8000bd2:	e7f2      	b.n	8000bba <__libc_init_array+0x1e>
 8000bd4:	08000c08 	.word	0x08000c08
 8000bd8:	08000c08 	.word	0x08000c08
 8000bdc:	08000c08 	.word	0x08000c08
 8000be0:	08000c0c 	.word	0x08000c0c

08000be4 <_init>:
 8000be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000be6:	bf00      	nop
 8000be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bea:	bc08      	pop	{r3}
 8000bec:	469e      	mov	lr, r3
 8000bee:	4770      	bx	lr

08000bf0 <_fini>:
 8000bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bf2:	bf00      	nop
 8000bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bf6:	bc08      	pop	{r3}
 8000bf8:	469e      	mov	lr, r3
 8000bfa:	4770      	bx	lr
