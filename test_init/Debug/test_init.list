
test_init.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000383c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080039dc  080039dc  000139dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003abc  08003abc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003abc  08003abc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003abc  08003abc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003abc  08003abc  00013abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ac0  08003ac0  00013ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000070  08003b34  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003b34  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f9e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001716  00000000  00000000  0002903e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000728  00000000  00000000  0002a758  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000690  00000000  00000000  0002ae80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000208a8  00000000  00000000  0002b510  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000705f  00000000  00000000  0004bdb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c1243  00000000  00000000  00052e17  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011405a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002290  00000000  00000000  001140d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080039c4 	.word	0x080039c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080039c4 	.word	0x080039c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 faa6 	bl	80007d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f80a 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f896 	bl	80003bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000290:	f000 f864 	bl	800035c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Hello world/n");
 8000294:	4801      	ldr	r0, [pc, #4]	; (800029c <main+0x1c>)
 8000296:	f002 fcb1 	bl	8002bfc <iprintf>
  while (1)
 800029a:	e7fe      	b.n	800029a <main+0x1a>
 800029c:	080039dc 	.word	0x080039dc

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b0a6      	sub	sp, #152	; 0x98
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002aa:	2228      	movs	r2, #40	; 0x28
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 fc9c 	bl	8002bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
 80002bc:	605a      	str	r2, [r3, #4]
 80002be:	609a      	str	r2, [r3, #8]
 80002c0:	60da      	str	r2, [r3, #12]
 80002c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2258      	movs	r2, #88	; 0x58
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f002 fc8e 	bl	8002bec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d0:	2302      	movs	r3, #2
 80002d2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d4:	2301      	movs	r3, #1
 80002d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d8:	2310      	movs	r3, #16
 80002da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002de:	2302      	movs	r3, #2
 80002e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 fd56 	bl	8000db0 <HAL_RCC_OscConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800030a:	f000 f8bf 	bl	800048c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030e:	230f      	movs	r3, #15
 8000310:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000312:	2302      	movs	r3, #2
 8000314:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800031a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800031e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000324:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000328:	2102      	movs	r1, #2
 800032a:	4618      	mov	r0, r3
 800032c:	f001 fc56 	bl	8001bdc <HAL_RCC_ClockConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000336:	f000 f8a9 	bl	800048c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800033a:	2302      	movs	r3, #2
 800033c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800033e:	2300      	movs	r3, #0
 8000340:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	4618      	mov	r0, r3
 8000346:	f001 fe7f 	bl	8002048 <HAL_RCCEx_PeriphCLKConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000350:	f000 f89c 	bl	800048c <Error_Handler>
  }
}
 8000354:	bf00      	nop
 8000356:	3798      	adds	r7, #152	; 0x98
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000360:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <MX_USART2_UART_Init+0x58>)
 8000362:	4a15      	ldr	r2, [pc, #84]	; (80003b8 <MX_USART2_UART_Init+0x5c>)
 8000364:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000366:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <MX_USART2_UART_Init+0x58>)
 8000368:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800036c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800036e:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <MX_USART2_UART_Init+0x58>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000374:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <MX_USART2_UART_Init+0x58>)
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <MX_USART2_UART_Init+0x58>)
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <MX_USART2_UART_Init+0x58>)
 8000382:	220c      	movs	r2, #12
 8000384:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <MX_USART2_UART_Init+0x58>)
 8000388:	2200      	movs	r2, #0
 800038a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800038c:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <MX_USART2_UART_Init+0x58>)
 800038e:	2200      	movs	r2, #0
 8000390:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <MX_USART2_UART_Init+0x58>)
 8000394:	2200      	movs	r2, #0
 8000396:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <MX_USART2_UART_Init+0x58>)
 800039a:	2200      	movs	r2, #0
 800039c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800039e:	4805      	ldr	r0, [pc, #20]	; (80003b4 <MX_USART2_UART_Init+0x58>)
 80003a0:	f002 f870 	bl	8002484 <HAL_UART_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003aa:	f000 f86f 	bl	800048c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20000098 	.word	0x20000098
 80003b8:	40004400 	.word	0x40004400

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b08a      	sub	sp, #40	; 0x28
 80003c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c2:	f107 0314 	add.w	r3, r7, #20
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
 80003d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d2:	4b2b      	ldr	r3, [pc, #172]	; (8000480 <MX_GPIO_Init+0xc4>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	4a2a      	ldr	r2, [pc, #168]	; (8000480 <MX_GPIO_Init+0xc4>)
 80003d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003dc:	6153      	str	r3, [r2, #20]
 80003de:	4b28      	ldr	r3, [pc, #160]	; (8000480 <MX_GPIO_Init+0xc4>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003e6:	613b      	str	r3, [r7, #16]
 80003e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003ea:	4b25      	ldr	r3, [pc, #148]	; (8000480 <MX_GPIO_Init+0xc4>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	4a24      	ldr	r2, [pc, #144]	; (8000480 <MX_GPIO_Init+0xc4>)
 80003f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003f4:	6153      	str	r3, [r2, #20]
 80003f6:	4b22      	ldr	r3, [pc, #136]	; (8000480 <MX_GPIO_Init+0xc4>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000402:	4b1f      	ldr	r3, [pc, #124]	; (8000480 <MX_GPIO_Init+0xc4>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a1e      	ldr	r2, [pc, #120]	; (8000480 <MX_GPIO_Init+0xc4>)
 8000408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b1c      	ldr	r3, [pc, #112]	; (8000480 <MX_GPIO_Init+0xc4>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800041a:	4b19      	ldr	r3, [pc, #100]	; (8000480 <MX_GPIO_Init+0xc4>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a18      	ldr	r2, [pc, #96]	; (8000480 <MX_GPIO_Init+0xc4>)
 8000420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b16      	ldr	r3, [pc, #88]	; (8000480 <MX_GPIO_Init+0xc4>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2120      	movs	r1, #32
 8000436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800043a:	f000 fca1 	bl	8000d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800043e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <MX_GPIO_Init+0xc8>)
 8000446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000448:	2300      	movs	r3, #0
 800044a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800044c:	f107 0314 	add.w	r3, r7, #20
 8000450:	4619      	mov	r1, r3
 8000452:	480d      	ldr	r0, [pc, #52]	; (8000488 <MX_GPIO_Init+0xcc>)
 8000454:	f000 fb0a 	bl	8000a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000458:	2320      	movs	r3, #32
 800045a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045c:	2301      	movs	r3, #1
 800045e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000464:	2300      	movs	r3, #0
 8000466:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	4619      	mov	r1, r3
 800046e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000472:	f000 fafb 	bl	8000a6c <HAL_GPIO_Init>

}
 8000476:	bf00      	nop
 8000478:	3728      	adds	r7, #40	; 0x28
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000
 8000484:	10210000 	.word	0x10210000
 8000488:	48000800 	.word	0x48000800

0800048c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
	...

0800049c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a2:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <HAL_MspInit+0x44>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	4a0e      	ldr	r2, [pc, #56]	; (80004e0 <HAL_MspInit+0x44>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6193      	str	r3, [r2, #24]
 80004ae:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <HAL_MspInit+0x44>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ba:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <HAL_MspInit+0x44>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	4a08      	ldr	r2, [pc, #32]	; (80004e0 <HAL_MspInit+0x44>)
 80004c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c4:	61d3      	str	r3, [r2, #28]
 80004c6:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <HAL_MspInit+0x44>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004d2:	2007      	movs	r0, #7
 80004d4:	f000 fa96 	bl	8000a04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40021000 	.word	0x40021000

080004e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	; 0x28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a17      	ldr	r2, [pc, #92]	; (8000560 <HAL_UART_MspInit+0x7c>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d128      	bne.n	8000558 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <HAL_UART_MspInit+0x80>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	4a16      	ldr	r2, [pc, #88]	; (8000564 <HAL_UART_MspInit+0x80>)
 800050c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	4b14      	ldr	r3, [pc, #80]	; (8000564 <HAL_UART_MspInit+0x80>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b11      	ldr	r3, [pc, #68]	; (8000564 <HAL_UART_MspInit+0x80>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a10      	ldr	r2, [pc, #64]	; (8000564 <HAL_UART_MspInit+0x80>)
 8000524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <HAL_UART_MspInit+0x80>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000536:	230c      	movs	r3, #12
 8000538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800053a:	2302      	movs	r3, #2
 800053c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000542:	2300      	movs	r3, #0
 8000544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000546:	2307      	movs	r3, #7
 8000548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	4619      	mov	r1, r3
 8000550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000554:	f000 fa8a 	bl	8000a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000558:	bf00      	nop
 800055a:	3728      	adds	r7, #40	; 0x28
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40004400 	.word	0x40004400
 8000564:	40021000 	.word	0x40021000

08000568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <HardFault_Handler+0x4>

0800057c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <MemManage_Handler+0x4>

08000582 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000586:	e7fe      	b.n	8000586 <BusFault_Handler+0x4>

08000588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800058c:	e7fe      	b.n	800058c <UsageFault_Handler+0x4>

0800058e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005bc:	f000 f950 	bl	8000860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <ITM_SendChar+0x48>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a0e      	ldr	r2, [pc, #56]	; (800060c <ITM_SendChar+0x48>)
 80005d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005d8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <ITM_SendChar+0x4c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a0c      	ldr	r2, [pc, #48]	; (8000610 <ITM_SendChar+0x4c>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80005e6:	bf00      	nop
 80005e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0f8      	beq.n	80005e8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80005f6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	6013      	str	r3, [r2, #0]
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000edfc 	.word	0xe000edfc
 8000610:	e0000e00 	.word	0xe0000e00

08000614 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
 8000624:	e00a      	b.n	800063c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000626:	f3af 8000 	nop.w
 800062a:	4601      	mov	r1, r0
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	1c5a      	adds	r2, r3, #1
 8000630:	60ba      	str	r2, [r7, #8]
 8000632:	b2ca      	uxtb	r2, r1
 8000634:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	3301      	adds	r3, #1
 800063a:	617b      	str	r3, [r7, #20]
 800063c:	697a      	ldr	r2, [r7, #20]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	429a      	cmp	r2, r3
 8000642:	dbf0      	blt.n	8000626 <_read+0x12>
	}

return len;
 8000644:	687b      	ldr	r3, [r7, #4]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3718      	adds	r7, #24
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b086      	sub	sp, #24
 8000652:	af00      	add	r7, sp, #0
 8000654:	60f8      	str	r0, [r7, #12]
 8000656:	60b9      	str	r1, [r7, #8]
 8000658:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]
 800065e:	e009      	b.n	8000674 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	60ba      	str	r2, [r7, #8]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffab 	bl	80005c4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	3301      	adds	r3, #1
 8000672:	617b      	str	r3, [r7, #20]
 8000674:	697a      	ldr	r2, [r7, #20]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	429a      	cmp	r2, r3
 800067a:	dbf1      	blt.n	8000660 <_write+0x12>
	}
	return len;
 800067c:	687b      	ldr	r3, [r7, #4]
}
 800067e:	4618      	mov	r0, r3
 8000680:	3718      	adds	r7, #24
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <_close>:

int _close(int file)
{
 8000686:	b480      	push	{r7}
 8000688:	b083      	sub	sp, #12
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
	return -1;
 800068e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000692:	4618      	mov	r0, r3
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
 80006a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006ae:	605a      	str	r2, [r3, #4]
	return 0;
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <_isatty>:

int _isatty(int file)
{
 80006be:	b480      	push	{r7}
 80006c0:	b083      	sub	sp, #12
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
	return 1;
 80006c6:	2301      	movs	r3, #1
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
	return 0;
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
	...

080006f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006f8:	4a14      	ldr	r2, [pc, #80]	; (800074c <_sbrk+0x5c>)
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <_sbrk+0x60>)
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000704:	4b13      	ldr	r3, [pc, #76]	; (8000754 <_sbrk+0x64>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d102      	bne.n	8000712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <_sbrk+0x64>)
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <_sbrk+0x68>)
 8000710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <_sbrk+0x64>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	693a      	ldr	r2, [r7, #16]
 800071c:	429a      	cmp	r2, r3
 800071e:	d207      	bcs.n	8000730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000720:	f002 fa3a 	bl	8002b98 <__errno>
 8000724:	4602      	mov	r2, r0
 8000726:	230c      	movs	r3, #12
 8000728:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
 800072e:	e009      	b.n	8000744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <_sbrk+0x64>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000736:	4b07      	ldr	r3, [pc, #28]	; (8000754 <_sbrk+0x64>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	4a05      	ldr	r2, [pc, #20]	; (8000754 <_sbrk+0x64>)
 8000740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000742:	68fb      	ldr	r3, [r7, #12]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3718      	adds	r7, #24
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20010000 	.word	0x20010000
 8000750:	00000400 	.word	0x00000400
 8000754:	2000008c 	.word	0x2000008c
 8000758:	20000128 	.word	0x20000128

0800075c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <SystemInit+0x20>)
 8000762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000766:	4a05      	ldr	r2, [pc, #20]	; (800077c <SystemInit+0x20>)
 8000768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800076c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000784:	480d      	ldr	r0, [pc, #52]	; (80007bc <LoopForever+0x6>)
  ldr r1, =_edata
 8000786:	490e      	ldr	r1, [pc, #56]	; (80007c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000788:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <LoopForever+0xe>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800078c:	e002      	b.n	8000794 <LoopCopyDataInit>

0800078e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000792:	3304      	adds	r3, #4

08000794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000798:	d3f9      	bcc.n	800078e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079a:	4a0b      	ldr	r2, [pc, #44]	; (80007c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800079c:	4c0b      	ldr	r4, [pc, #44]	; (80007cc <LoopForever+0x16>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a0:	e001      	b.n	80007a6 <LoopFillZerobss>

080007a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a4:	3204      	adds	r2, #4

080007a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a8:	d3fb      	bcc.n	80007a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007aa:	f7ff ffd7 	bl	800075c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ae:	f002 f9f9 	bl	8002ba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007b2:	f7ff fd65 	bl	8000280 <main>

080007b6 <LoopForever>:

LoopForever:
    b LoopForever
 80007b6:	e7fe      	b.n	80007b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007c4:	08003ac4 	.word	0x08003ac4
  ldr r2, =_sbss
 80007c8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007cc:	20000124 	.word	0x20000124

080007d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007d0:	e7fe      	b.n	80007d0 <ADC1_2_IRQHandler>
	...

080007d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <HAL_Init+0x28>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a07      	ldr	r2, [pc, #28]	; (80007fc <HAL_Init+0x28>)
 80007de:	f043 0310 	orr.w	r3, r3, #16
 80007e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e4:	2003      	movs	r0, #3
 80007e6:	f000 f90d 	bl	8000a04 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ea:	2000      	movs	r0, #0
 80007ec:	f000 f808 	bl	8000800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f0:	f7ff fe54 	bl	800049c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40022000 	.word	0x40022000

08000800 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_InitTick+0x54>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <HAL_InitTick+0x58>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4619      	mov	r1, r3
 8000812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000816:	fbb3 f3f1 	udiv	r3, r3, r1
 800081a:	fbb2 f3f3 	udiv	r3, r2, r3
 800081e:	4618      	mov	r0, r3
 8000820:	f000 f917 	bl	8000a52 <HAL_SYSTICK_Config>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	e00e      	b.n	800084c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b0f      	cmp	r3, #15
 8000832:	d80a      	bhi.n	800084a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000834:	2200      	movs	r2, #0
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	f04f 30ff 	mov.w	r0, #4294967295
 800083c:	f000 f8ed 	bl	8000a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000840:	4a06      	ldr	r2, [pc, #24]	; (800085c <HAL_InitTick+0x5c>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000846:	2300      	movs	r3, #0
 8000848:	e000      	b.n	800084c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000000 	.word	0x20000000
 8000858:	20000008 	.word	0x20000008
 800085c:	20000004 	.word	0x20000004

08000860 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_IncTick+0x20>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	461a      	mov	r2, r3
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_IncTick+0x24>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4413      	add	r3, r2
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <HAL_IncTick+0x24>)
 8000872:	6013      	str	r3, [r2, #0]
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	20000008 	.word	0x20000008
 8000884:	2000011c 	.word	0x2000011c

08000888 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  return uwTick;  
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <HAL_GetTick+0x14>)
 800088e:	681b      	ldr	r3, [r3, #0]
}
 8000890:	4618      	mov	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	2000011c 	.word	0x2000011c

080008a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <__NVIC_SetPriorityGrouping+0x44>)
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008b6:	68ba      	ldr	r2, [r7, #8]
 80008b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008bc:	4013      	ands	r3, r2
 80008be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008d2:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <__NVIC_SetPriorityGrouping+0x44>)
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	60d3      	str	r3, [r2, #12]
}
 80008d8:	bf00      	nop
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <__NVIC_GetPriorityGrouping+0x18>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	0a1b      	lsrs	r3, r3, #8
 80008f2:	f003 0307 	and.w	r3, r3, #7
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	6039      	str	r1, [r7, #0]
 800090e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000914:	2b00      	cmp	r3, #0
 8000916:	db0a      	blt.n	800092e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	b2da      	uxtb	r2, r3
 800091c:	490c      	ldr	r1, [pc, #48]	; (8000950 <__NVIC_SetPriority+0x4c>)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	0112      	lsls	r2, r2, #4
 8000924:	b2d2      	uxtb	r2, r2
 8000926:	440b      	add	r3, r1
 8000928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800092c:	e00a      	b.n	8000944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4908      	ldr	r1, [pc, #32]	; (8000954 <__NVIC_SetPriority+0x50>)
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	f003 030f 	and.w	r3, r3, #15
 800093a:	3b04      	subs	r3, #4
 800093c:	0112      	lsls	r2, r2, #4
 800093e:	b2d2      	uxtb	r2, r2
 8000940:	440b      	add	r3, r1
 8000942:	761a      	strb	r2, [r3, #24]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	e000e100 	.word	0xe000e100
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000958:	b480      	push	{r7}
 800095a:	b089      	sub	sp, #36	; 0x24
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	f1c3 0307 	rsb	r3, r3, #7
 8000972:	2b04      	cmp	r3, #4
 8000974:	bf28      	it	cs
 8000976:	2304      	movcs	r3, #4
 8000978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	3304      	adds	r3, #4
 800097e:	2b06      	cmp	r3, #6
 8000980:	d902      	bls.n	8000988 <NVIC_EncodePriority+0x30>
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	3b03      	subs	r3, #3
 8000986:	e000      	b.n	800098a <NVIC_EncodePriority+0x32>
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	f04f 32ff 	mov.w	r2, #4294967295
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	43da      	mvns	r2, r3
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	401a      	ands	r2, r3
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a0:	f04f 31ff 	mov.w	r1, #4294967295
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	fa01 f303 	lsl.w	r3, r1, r3
 80009aa:	43d9      	mvns	r1, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b0:	4313      	orrs	r3, r2
         );
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3724      	adds	r7, #36	; 0x24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009d0:	d301      	bcc.n	80009d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00f      	b.n	80009f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <SysTick_Config+0x40>)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3b01      	subs	r3, #1
 80009dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009de:	210f      	movs	r1, #15
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	f7ff ff8e 	bl	8000904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <SysTick_Config+0x40>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ee:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <SysTick_Config+0x40>)
 80009f0:	2207      	movs	r2, #7
 80009f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	e000e010 	.word	0xe000e010

08000a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff ff47 	bl	80008a0 <__NVIC_SetPriorityGrouping>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b086      	sub	sp, #24
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	4603      	mov	r3, r0
 8000a22:	60b9      	str	r1, [r7, #8]
 8000a24:	607a      	str	r2, [r7, #4]
 8000a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a2c:	f7ff ff5c 	bl	80008e8 <__NVIC_GetPriorityGrouping>
 8000a30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	68b9      	ldr	r1, [r7, #8]
 8000a36:	6978      	ldr	r0, [r7, #20]
 8000a38:	f7ff ff8e 	bl	8000958 <NVIC_EncodePriority>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a42:	4611      	mov	r1, r2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ff5d 	bl	8000904 <__NVIC_SetPriority>
}
 8000a4a:	bf00      	nop
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff ffb0 	bl	80009c0 <SysTick_Config>
 8000a60:	4603      	mov	r3, r0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b087      	sub	sp, #28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a7a:	e160      	b.n	8000d3e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	2101      	movs	r1, #1
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	fa01 f303 	lsl.w	r3, r1, r3
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	f000 8152 	beq.w	8000d38 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d00b      	beq.n	8000ab4 <HAL_GPIO_Init+0x48>
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d007      	beq.n	8000ab4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aa8:	2b11      	cmp	r3, #17
 8000aaa:	d003      	beq.n	8000ab4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	2b12      	cmp	r3, #18
 8000ab2:	d130      	bne.n	8000b16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	2203      	movs	r2, #3
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	68da      	ldr	r2, [r3, #12]
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aea:	2201      	movs	r2, #1
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4013      	ands	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	091b      	lsrs	r3, r3, #4
 8000b00:	f003 0201 	and.w	r2, r3, #1
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	2203      	movs	r2, #3
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	689a      	ldr	r2, [r3, #8]
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d003      	beq.n	8000b56 <HAL_GPIO_Init+0xea>
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	2b12      	cmp	r3, #18
 8000b54:	d123      	bne.n	8000b9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	08da      	lsrs	r2, r3, #3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	3208      	adds	r2, #8
 8000b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	220f      	movs	r2, #15
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43db      	mvns	r3, r3
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	4013      	ands	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	691a      	ldr	r2, [r3, #16]
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	f003 0307 	and.w	r3, r3, #7
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	08da      	lsrs	r2, r3, #3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3208      	adds	r2, #8
 8000b98:	6939      	ldr	r1, [r7, #16]
 8000b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	2203      	movs	r2, #3
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f003 0203 	and.w	r2, r3, #3
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f000 80ac 	beq.w	8000d38 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be0:	4b5e      	ldr	r3, [pc, #376]	; (8000d5c <HAL_GPIO_Init+0x2f0>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a5d      	ldr	r2, [pc, #372]	; (8000d5c <HAL_GPIO_Init+0x2f0>)
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b5b      	ldr	r3, [pc, #364]	; (8000d5c <HAL_GPIO_Init+0x2f0>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bf8:	4a59      	ldr	r2, [pc, #356]	; (8000d60 <HAL_GPIO_Init+0x2f4>)
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	089b      	lsrs	r3, r3, #2
 8000bfe:	3302      	adds	r3, #2
 8000c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	f003 0303 	and.w	r3, r3, #3
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	220f      	movs	r2, #15
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c22:	d025      	beq.n	8000c70 <HAL_GPIO_Init+0x204>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a4f      	ldr	r2, [pc, #316]	; (8000d64 <HAL_GPIO_Init+0x2f8>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d01f      	beq.n	8000c6c <HAL_GPIO_Init+0x200>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a4e      	ldr	r2, [pc, #312]	; (8000d68 <HAL_GPIO_Init+0x2fc>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d019      	beq.n	8000c68 <HAL_GPIO_Init+0x1fc>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a4d      	ldr	r2, [pc, #308]	; (8000d6c <HAL_GPIO_Init+0x300>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d013      	beq.n	8000c64 <HAL_GPIO_Init+0x1f8>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a4c      	ldr	r2, [pc, #304]	; (8000d70 <HAL_GPIO_Init+0x304>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d00d      	beq.n	8000c60 <HAL_GPIO_Init+0x1f4>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a4b      	ldr	r2, [pc, #300]	; (8000d74 <HAL_GPIO_Init+0x308>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d007      	beq.n	8000c5c <HAL_GPIO_Init+0x1f0>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a4a      	ldr	r2, [pc, #296]	; (8000d78 <HAL_GPIO_Init+0x30c>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d101      	bne.n	8000c58 <HAL_GPIO_Init+0x1ec>
 8000c54:	2306      	movs	r3, #6
 8000c56:	e00c      	b.n	8000c72 <HAL_GPIO_Init+0x206>
 8000c58:	2307      	movs	r3, #7
 8000c5a:	e00a      	b.n	8000c72 <HAL_GPIO_Init+0x206>
 8000c5c:	2305      	movs	r3, #5
 8000c5e:	e008      	b.n	8000c72 <HAL_GPIO_Init+0x206>
 8000c60:	2304      	movs	r3, #4
 8000c62:	e006      	b.n	8000c72 <HAL_GPIO_Init+0x206>
 8000c64:	2303      	movs	r3, #3
 8000c66:	e004      	b.n	8000c72 <HAL_GPIO_Init+0x206>
 8000c68:	2302      	movs	r3, #2
 8000c6a:	e002      	b.n	8000c72 <HAL_GPIO_Init+0x206>
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e000      	b.n	8000c72 <HAL_GPIO_Init+0x206>
 8000c70:	2300      	movs	r3, #0
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	f002 0203 	and.w	r2, r2, #3
 8000c78:	0092      	lsls	r2, r2, #2
 8000c7a:	4093      	lsls	r3, r2
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c82:	4937      	ldr	r1, [pc, #220]	; (8000d60 <HAL_GPIO_Init+0x2f4>)
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	089b      	lsrs	r3, r3, #2
 8000c88:	3302      	adds	r3, #2
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c90:	4b3a      	ldr	r3, [pc, #232]	; (8000d7c <HAL_GPIO_Init+0x310>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d003      	beq.n	8000cb4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cb4:	4a31      	ldr	r2, [pc, #196]	; (8000d7c <HAL_GPIO_Init+0x310>)
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000cba:	4b30      	ldr	r3, [pc, #192]	; (8000d7c <HAL_GPIO_Init+0x310>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cde:	4a27      	ldr	r2, [pc, #156]	; (8000d7c <HAL_GPIO_Init+0x310>)
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ce4:	4b25      	ldr	r3, [pc, #148]	; (8000d7c <HAL_GPIO_Init+0x310>)
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	43db      	mvns	r3, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d08:	4a1c      	ldr	r2, [pc, #112]	; (8000d7c <HAL_GPIO_Init+0x310>)
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <HAL_GPIO_Init+0x310>)
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	43db      	mvns	r3, r3
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d32:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <HAL_GPIO_Init+0x310>)
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	fa22 f303 	lsr.w	r3, r2, r3
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f47f ae97 	bne.w	8000a7c <HAL_GPIO_Init+0x10>
  }
}
 8000d4e:	bf00      	nop
 8000d50:	371c      	adds	r7, #28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40010000 	.word	0x40010000
 8000d64:	48000400 	.word	0x48000400
 8000d68:	48000800 	.word	0x48000800
 8000d6c:	48000c00 	.word	0x48000c00
 8000d70:	48001000 	.word	0x48001000
 8000d74:	48001400 	.word	0x48001400
 8000d78:	48001800 	.word	0x48001800
 8000d7c:	40010400 	.word	0x40010400

08000d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	807b      	strh	r3, [r7, #2]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d90:	787b      	ldrb	r3, [r7, #1]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d96:	887a      	ldrh	r2, [r7, #2]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d9c:	e002      	b.n	8000da4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d9e:	887a      	ldrh	r2, [r7, #2]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	f000 bf01 	b.w	8001bcc <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f000 8160 	beq.w	800109a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dda:	4bae      	ldr	r3, [pc, #696]	; (8001094 <HAL_RCC_OscConfig+0x2e4>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 030c 	and.w	r3, r3, #12
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d00c      	beq.n	8000e00 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000de6:	4bab      	ldr	r3, [pc, #684]	; (8001094 <HAL_RCC_OscConfig+0x2e4>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 030c 	and.w	r3, r3, #12
 8000dee:	2b08      	cmp	r3, #8
 8000df0:	d159      	bne.n	8000ea6 <HAL_RCC_OscConfig+0xf6>
 8000df2:	4ba8      	ldr	r3, [pc, #672]	; (8001094 <HAL_RCC_OscConfig+0x2e4>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dfe:	d152      	bne.n	8000ea6 <HAL_RCC_OscConfig+0xf6>
 8000e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e04:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e08:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000e0c:	fa93 f3a3 	rbit	r3, r3
 8000e10:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e14:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e18:	fab3 f383 	clz	r3, r3
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	095b      	lsrs	r3, r3, #5
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d102      	bne.n	8000e32 <HAL_RCC_OscConfig+0x82>
 8000e2c:	4b99      	ldr	r3, [pc, #612]	; (8001094 <HAL_RCC_OscConfig+0x2e4>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	e015      	b.n	8000e5e <HAL_RCC_OscConfig+0xae>
 8000e32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e36:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000e3e:	fa93 f3a3 	rbit	r3, r3
 8000e42:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000e46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e4a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e4e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000e52:	fa93 f3a3 	rbit	r3, r3
 8000e56:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e5a:	4b8e      	ldr	r3, [pc, #568]	; (8001094 <HAL_RCC_OscConfig+0x2e4>)
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e62:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000e66:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000e6a:	fa92 f2a2 	rbit	r2, r2
 8000e6e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000e72:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e76:	fab2 f282 	clz	r2, r2
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	f042 0220 	orr.w	r2, r2, #32
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	f002 021f 	and.w	r2, r2, #31
 8000e86:	2101      	movs	r1, #1
 8000e88:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 8102 	beq.w	8001098 <HAL_RCC_OscConfig+0x2e8>
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f040 80fc 	bne.w	8001098 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	f000 be93 	b.w	8001bcc <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eb0:	d106      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x110>
 8000eb2:	4b78      	ldr	r3, [pc, #480]	; (8001094 <HAL_RCC_OscConfig+0x2e4>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a77      	ldr	r2, [pc, #476]	; (8001094 <HAL_RCC_OscConfig+0x2e4>)
 8000eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	e030      	b.n	8000f22 <HAL_RCC_OscConfig+0x172>
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d10c      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x134>
 8000eca:	4b72      	ldr	r3, [pc, #456]	; (8001094 <HAL_RCC_OscConfig+0x2e4>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a71      	ldr	r2, [pc, #452]	; (8001094 <HAL_RCC_OscConfig+0x2e4>)
 8000ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	4b6f      	ldr	r3, [pc, #444]	; (8001094 <HAL_RCC_OscConfig+0x2e4>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a6e      	ldr	r2, [pc, #440]	; (8001094 <HAL_RCC_OscConfig+0x2e4>)
 8000edc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	e01e      	b.n	8000f22 <HAL_RCC_OscConfig+0x172>
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eee:	d10c      	bne.n	8000f0a <HAL_RCC_OscConfig+0x15a>
 8000ef0:	4b68      	ldr	r3, [pc, #416]	; (8001094 <HAL_RCC_OscConfig+0x2e4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a67      	ldr	r2, [pc, #412]	; (8001094 <HAL_RCC_OscConfig+0x2e4>)
 8000ef6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	4b65      	ldr	r3, [pc, #404]	; (8001094 <HAL_RCC_OscConfig+0x2e4>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a64      	ldr	r2, [pc, #400]	; (8001094 <HAL_RCC_OscConfig+0x2e4>)
 8000f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	e00b      	b.n	8000f22 <HAL_RCC_OscConfig+0x172>
 8000f0a:	4b62      	ldr	r3, [pc, #392]	; (8001094 <HAL_RCC_OscConfig+0x2e4>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a61      	ldr	r2, [pc, #388]	; (8001094 <HAL_RCC_OscConfig+0x2e4>)
 8000f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	4b5f      	ldr	r3, [pc, #380]	; (8001094 <HAL_RCC_OscConfig+0x2e4>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a5e      	ldr	r2, [pc, #376]	; (8001094 <HAL_RCC_OscConfig+0x2e4>)
 8000f1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f20:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d059      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fcac 	bl	8000888 <HAL_GetTick>
 8000f30:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f34:	e00a      	b.n	8000f4c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f36:	f7ff fca7 	bl	8000888 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b64      	cmp	r3, #100	; 0x64
 8000f44:	d902      	bls.n	8000f4c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	f000 be40 	b.w	8001bcc <HAL_RCC_OscConfig+0xe1c>
 8000f4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f50:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f54:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000f58:	fa93 f3a3 	rbit	r3, r3
 8000f5c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000f60:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f64:	fab3 f383 	clz	r3, r3
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	095b      	lsrs	r3, r3, #5
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d102      	bne.n	8000f7e <HAL_RCC_OscConfig+0x1ce>
 8000f78:	4b46      	ldr	r3, [pc, #280]	; (8001094 <HAL_RCC_OscConfig+0x2e4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	e015      	b.n	8000faa <HAL_RCC_OscConfig+0x1fa>
 8000f7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f82:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f86:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000f8a:	fa93 f3a3 	rbit	r3, r3
 8000f8e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000f92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f96:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f9a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000f9e:	fa93 f3a3 	rbit	r3, r3
 8000fa2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000fa6:	4b3b      	ldr	r3, [pc, #236]	; (8001094 <HAL_RCC_OscConfig+0x2e4>)
 8000fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000faa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fae:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000fb2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000fb6:	fa92 f2a2 	rbit	r2, r2
 8000fba:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000fbe:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000fc2:	fab2 f282 	clz	r2, r2
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	f042 0220 	orr.w	r2, r2, #32
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	f002 021f 	and.w	r2, r2, #31
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd8:	4013      	ands	r3, r2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0ab      	beq.n	8000f36 <HAL_RCC_OscConfig+0x186>
 8000fde:	e05c      	b.n	800109a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fc52 	bl	8000888 <HAL_GetTick>
 8000fe4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe8:	e00a      	b.n	8001000 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fea:	f7ff fc4d 	bl	8000888 <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b64      	cmp	r3, #100	; 0x64
 8000ff8:	d902      	bls.n	8001000 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	f000 bde6 	b.w	8001bcc <HAL_RCC_OscConfig+0xe1c>
 8001000:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001004:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001008:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800100c:	fa93 f3a3 	rbit	r3, r3
 8001010:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001014:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001018:	fab3 f383 	clz	r3, r3
 800101c:	b2db      	uxtb	r3, r3
 800101e:	095b      	lsrs	r3, r3, #5
 8001020:	b2db      	uxtb	r3, r3
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b01      	cmp	r3, #1
 800102a:	d102      	bne.n	8001032 <HAL_RCC_OscConfig+0x282>
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <HAL_RCC_OscConfig+0x2e4>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	e015      	b.n	800105e <HAL_RCC_OscConfig+0x2ae>
 8001032:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001036:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800103e:	fa93 f3a3 	rbit	r3, r3
 8001042:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001046:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800104a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800104e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001052:	fa93 f3a3 	rbit	r3, r3
 8001056:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_RCC_OscConfig+0x2e4>)
 800105c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001062:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001066:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800106a:	fa92 f2a2 	rbit	r2, r2
 800106e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001072:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001076:	fab2 f282 	clz	r2, r2
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	f042 0220 	orr.w	r2, r2, #32
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	f002 021f 	and.w	r2, r2, #31
 8001086:	2101      	movs	r1, #1
 8001088:	fa01 f202 	lsl.w	r2, r1, r2
 800108c:	4013      	ands	r3, r2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1ab      	bne.n	8000fea <HAL_RCC_OscConfig+0x23a>
 8001092:	e002      	b.n	800109a <HAL_RCC_OscConfig+0x2ea>
 8001094:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f000 8170 	beq.w	800138a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010aa:	4bd0      	ldr	r3, [pc, #832]	; (80013ec <HAL_RCC_OscConfig+0x63c>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 030c 	and.w	r3, r3, #12
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00c      	beq.n	80010d0 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010b6:	4bcd      	ldr	r3, [pc, #820]	; (80013ec <HAL_RCC_OscConfig+0x63c>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 030c 	and.w	r3, r3, #12
 80010be:	2b08      	cmp	r3, #8
 80010c0:	d16d      	bne.n	800119e <HAL_RCC_OscConfig+0x3ee>
 80010c2:	4bca      	ldr	r3, [pc, #808]	; (80013ec <HAL_RCC_OscConfig+0x63c>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80010ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010ce:	d166      	bne.n	800119e <HAL_RCC_OscConfig+0x3ee>
 80010d0:	2302      	movs	r3, #2
 80010d2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80010da:	fa93 f3a3 	rbit	r3, r3
 80010de:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80010e2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e6:	fab3 f383 	clz	r3, r3
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	095b      	lsrs	r3, r3, #5
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d102      	bne.n	8001100 <HAL_RCC_OscConfig+0x350>
 80010fa:	4bbc      	ldr	r3, [pc, #752]	; (80013ec <HAL_RCC_OscConfig+0x63c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	e013      	b.n	8001128 <HAL_RCC_OscConfig+0x378>
 8001100:	2302      	movs	r3, #2
 8001102:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001106:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800110a:	fa93 f3a3 	rbit	r3, r3
 800110e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001112:	2302      	movs	r3, #2
 8001114:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001118:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800111c:	fa93 f3a3 	rbit	r3, r3
 8001120:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001124:	4bb1      	ldr	r3, [pc, #708]	; (80013ec <HAL_RCC_OscConfig+0x63c>)
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	2202      	movs	r2, #2
 800112a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800112e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001132:	fa92 f2a2 	rbit	r2, r2
 8001136:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800113a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800113e:	fab2 f282 	clz	r2, r2
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	f042 0220 	orr.w	r2, r2, #32
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	f002 021f 	and.w	r2, r2, #31
 800114e:	2101      	movs	r1, #1
 8001150:	fa01 f202 	lsl.w	r2, r1, r2
 8001154:	4013      	ands	r3, r2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d007      	beq.n	800116a <HAL_RCC_OscConfig+0x3ba>
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d002      	beq.n	800116a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	f000 bd31 	b.w	8001bcc <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800116a:	4ba0      	ldr	r3, [pc, #640]	; (80013ec <HAL_RCC_OscConfig+0x63c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	21f8      	movs	r1, #248	; 0xf8
 800117a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001182:	fa91 f1a1 	rbit	r1, r1
 8001186:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800118a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800118e:	fab1 f181 	clz	r1, r1
 8001192:	b2c9      	uxtb	r1, r1
 8001194:	408b      	lsls	r3, r1
 8001196:	4995      	ldr	r1, [pc, #596]	; (80013ec <HAL_RCC_OscConfig+0x63c>)
 8001198:	4313      	orrs	r3, r2
 800119a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119c:	e0f5      	b.n	800138a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 8085 	beq.w	80012b4 <HAL_RCC_OscConfig+0x504>
 80011aa:	2301      	movs	r3, #1
 80011ac:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80011b4:	fa93 f3a3 	rbit	r3, r3
 80011b8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80011bc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c0:	fab3 f383 	clz	r3, r3
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	461a      	mov	r2, r3
 80011d2:	2301      	movs	r3, #1
 80011d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d6:	f7ff fb57 	bl	8000888 <HAL_GetTick>
 80011da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011de:	e00a      	b.n	80011f6 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e0:	f7ff fb52 	bl	8000888 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d902      	bls.n	80011f6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	f000 bceb 	b.w	8001bcc <HAL_RCC_OscConfig+0xe1c>
 80011f6:	2302      	movs	r3, #2
 80011f8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001208:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120c:	fab3 f383 	clz	r3, r3
 8001210:	b2db      	uxtb	r3, r3
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b01      	cmp	r3, #1
 800121e:	d102      	bne.n	8001226 <HAL_RCC_OscConfig+0x476>
 8001220:	4b72      	ldr	r3, [pc, #456]	; (80013ec <HAL_RCC_OscConfig+0x63c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	e013      	b.n	800124e <HAL_RCC_OscConfig+0x49e>
 8001226:	2302      	movs	r3, #2
 8001228:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001230:	fa93 f3a3 	rbit	r3, r3
 8001234:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001238:	2302      	movs	r3, #2
 800123a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800123e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001242:	fa93 f3a3 	rbit	r3, r3
 8001246:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800124a:	4b68      	ldr	r3, [pc, #416]	; (80013ec <HAL_RCC_OscConfig+0x63c>)
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	2202      	movs	r2, #2
 8001250:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001254:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001258:	fa92 f2a2 	rbit	r2, r2
 800125c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001260:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001264:	fab2 f282 	clz	r2, r2
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	f042 0220 	orr.w	r2, r2, #32
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	f002 021f 	and.w	r2, r2, #31
 8001274:	2101      	movs	r1, #1
 8001276:	fa01 f202 	lsl.w	r2, r1, r2
 800127a:	4013      	ands	r3, r2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0af      	beq.n	80011e0 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001280:	4b5a      	ldr	r3, [pc, #360]	; (80013ec <HAL_RCC_OscConfig+0x63c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	21f8      	movs	r1, #248	; 0xf8
 8001290:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001294:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001298:	fa91 f1a1 	rbit	r1, r1
 800129c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80012a0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012a4:	fab1 f181 	clz	r1, r1
 80012a8:	b2c9      	uxtb	r1, r1
 80012aa:	408b      	lsls	r3, r1
 80012ac:	494f      	ldr	r1, [pc, #316]	; (80013ec <HAL_RCC_OscConfig+0x63c>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]
 80012b2:	e06a      	b.n	800138a <HAL_RCC_OscConfig+0x5da>
 80012b4:	2301      	movs	r3, #1
 80012b6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ba:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80012be:	fa93 f3a3 	rbit	r3, r3
 80012c2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80012c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ca:	fab3 f383 	clz	r3, r3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	461a      	mov	r2, r3
 80012dc:	2300      	movs	r3, #0
 80012de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fad2 	bl	8000888 <HAL_GetTick>
 80012e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e8:	e00a      	b.n	8001300 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ea:	f7ff facd 	bl	8000888 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d902      	bls.n	8001300 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	f000 bc66 	b.w	8001bcc <HAL_RCC_OscConfig+0xe1c>
 8001300:	2302      	movs	r3, #2
 8001302:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001306:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800130a:	fa93 f3a3 	rbit	r3, r3
 800130e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001312:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001316:	fab3 f383 	clz	r3, r3
 800131a:	b2db      	uxtb	r3, r3
 800131c:	095b      	lsrs	r3, r3, #5
 800131e:	b2db      	uxtb	r3, r3
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b01      	cmp	r3, #1
 8001328:	d102      	bne.n	8001330 <HAL_RCC_OscConfig+0x580>
 800132a:	4b30      	ldr	r3, [pc, #192]	; (80013ec <HAL_RCC_OscConfig+0x63c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	e013      	b.n	8001358 <HAL_RCC_OscConfig+0x5a8>
 8001330:	2302      	movs	r3, #2
 8001332:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001336:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800133a:	fa93 f3a3 	rbit	r3, r3
 800133e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001342:	2302      	movs	r3, #2
 8001344:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001348:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800134c:	fa93 f3a3 	rbit	r3, r3
 8001350:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001354:	4b25      	ldr	r3, [pc, #148]	; (80013ec <HAL_RCC_OscConfig+0x63c>)
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	2202      	movs	r2, #2
 800135a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800135e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001362:	fa92 f2a2 	rbit	r2, r2
 8001366:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800136a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800136e:	fab2 f282 	clz	r2, r2
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	f042 0220 	orr.w	r2, r2, #32
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	f002 021f 	and.w	r2, r2, #31
 800137e:	2101      	movs	r1, #1
 8001380:	fa01 f202 	lsl.w	r2, r1, r2
 8001384:	4013      	ands	r3, r2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1af      	bne.n	80012ea <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0308 	and.w	r3, r3, #8
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 80da 	beq.w	800154e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d069      	beq.n	8001478 <HAL_RCC_OscConfig+0x6c8>
 80013a4:	2301      	movs	r3, #1
 80013a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013ae:	fa93 f3a3 	rbit	r3, r3
 80013b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80013b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ba:	fab3 f383 	clz	r3, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <HAL_RCC_OscConfig+0x640>)
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	461a      	mov	r2, r3
 80013ca:	2301      	movs	r3, #1
 80013cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ce:	f7ff fa5b 	bl	8000888 <HAL_GetTick>
 80013d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d6:	e00d      	b.n	80013f4 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d8:	f7ff fa56 	bl	8000888 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d905      	bls.n	80013f4 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e3ef      	b.n	8001bcc <HAL_RCC_OscConfig+0xe1c>
 80013ec:	40021000 	.word	0x40021000
 80013f0:	10908120 	.word	0x10908120
 80013f4:	2302      	movs	r3, #2
 80013f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80013fe:	fa93 f2a3 	rbit	r2, r3
 8001402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800140c:	2202      	movs	r2, #2
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	fa93 f2a3 	rbit	r2, r3
 800141a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001424:	2202      	movs	r2, #2
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	fa93 f2a3 	rbit	r2, r3
 8001432:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001436:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001438:	4ba4      	ldr	r3, [pc, #656]	; (80016cc <HAL_RCC_OscConfig+0x91c>)
 800143a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800143c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001440:	2102      	movs	r1, #2
 8001442:	6019      	str	r1, [r3, #0]
 8001444:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	fa93 f1a3 	rbit	r1, r3
 800144e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001452:	6019      	str	r1, [r3, #0]
  return result;
 8001454:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	fab3 f383 	clz	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f003 031f 	and.w	r3, r3, #31
 800146a:	2101      	movs	r1, #1
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	4013      	ands	r3, r2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0b0      	beq.n	80013d8 <HAL_RCC_OscConfig+0x628>
 8001476:	e06a      	b.n	800154e <HAL_RCC_OscConfig+0x79e>
 8001478:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800147c:	2201      	movs	r2, #1
 800147e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001480:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	fa93 f2a3 	rbit	r2, r3
 800148a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800148e:	601a      	str	r2, [r3, #0]
  return result;
 8001490:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001494:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001496:	fab3 f383 	clz	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	461a      	mov	r2, r3
 800149e:	4b8c      	ldr	r3, [pc, #560]	; (80016d0 <HAL_RCC_OscConfig+0x920>)
 80014a0:	4413      	add	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	461a      	mov	r2, r3
 80014a6:	2300      	movs	r3, #0
 80014a8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014aa:	f7ff f9ed 	bl	8000888 <HAL_GetTick>
 80014ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b2:	e009      	b.n	80014c8 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b4:	f7ff f9e8 	bl	8000888 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e381      	b.n	8001bcc <HAL_RCC_OscConfig+0xe1c>
 80014c8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014cc:	2202      	movs	r2, #2
 80014ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	fa93 f2a3 	rbit	r2, r3
 80014da:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014e4:	2202      	movs	r2, #2
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	fa93 f2a3 	rbit	r2, r3
 80014f2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014fc:	2202      	movs	r2, #2
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	fa93 f2a3 	rbit	r2, r3
 800150a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800150e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001510:	4b6e      	ldr	r3, [pc, #440]	; (80016cc <HAL_RCC_OscConfig+0x91c>)
 8001512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001514:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001518:	2102      	movs	r1, #2
 800151a:	6019      	str	r1, [r3, #0]
 800151c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	fa93 f1a3 	rbit	r1, r3
 8001526:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800152a:	6019      	str	r1, [r3, #0]
  return result;
 800152c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	fab3 f383 	clz	r3, r3
 8001536:	b2db      	uxtb	r3, r3
 8001538:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800153c:	b2db      	uxtb	r3, r3
 800153e:	f003 031f 	and.w	r3, r3, #31
 8001542:	2101      	movs	r1, #1
 8001544:	fa01 f303 	lsl.w	r3, r1, r3
 8001548:	4013      	ands	r3, r2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1b2      	bne.n	80014b4 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 8157 	beq.w	800180c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800155e:	2300      	movs	r3, #0
 8001560:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001564:	4b59      	ldr	r3, [pc, #356]	; (80016cc <HAL_RCC_OscConfig+0x91c>)
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d112      	bne.n	8001596 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001570:	4b56      	ldr	r3, [pc, #344]	; (80016cc <HAL_RCC_OscConfig+0x91c>)
 8001572:	69db      	ldr	r3, [r3, #28]
 8001574:	4a55      	ldr	r2, [pc, #340]	; (80016cc <HAL_RCC_OscConfig+0x91c>)
 8001576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157a:	61d3      	str	r3, [r2, #28]
 800157c:	4b53      	ldr	r3, [pc, #332]	; (80016cc <HAL_RCC_OscConfig+0x91c>)
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	f107 030c 	add.w	r3, r7, #12
 800158e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001590:	2301      	movs	r3, #1
 8001592:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001596:	4b4f      	ldr	r3, [pc, #316]	; (80016d4 <HAL_RCC_OscConfig+0x924>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d11a      	bne.n	80015d8 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015a2:	4b4c      	ldr	r3, [pc, #304]	; (80016d4 <HAL_RCC_OscConfig+0x924>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a4b      	ldr	r2, [pc, #300]	; (80016d4 <HAL_RCC_OscConfig+0x924>)
 80015a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ae:	f7ff f96b 	bl	8000888 <HAL_GetTick>
 80015b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b6:	e009      	b.n	80015cc <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b8:	f7ff f966 	bl	8000888 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b64      	cmp	r3, #100	; 0x64
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e2ff      	b.n	8001bcc <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015cc:	4b41      	ldr	r3, [pc, #260]	; (80016d4 <HAL_RCC_OscConfig+0x924>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0ef      	beq.n	80015b8 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d106      	bne.n	80015f0 <HAL_RCC_OscConfig+0x840>
 80015e2:	4b3a      	ldr	r3, [pc, #232]	; (80016cc <HAL_RCC_OscConfig+0x91c>)
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	4a39      	ldr	r2, [pc, #228]	; (80016cc <HAL_RCC_OscConfig+0x91c>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6213      	str	r3, [r2, #32]
 80015ee:	e02f      	b.n	8001650 <HAL_RCC_OscConfig+0x8a0>
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0x864>
 80015fa:	4b34      	ldr	r3, [pc, #208]	; (80016cc <HAL_RCC_OscConfig+0x91c>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4a33      	ldr	r2, [pc, #204]	; (80016cc <HAL_RCC_OscConfig+0x91c>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6213      	str	r3, [r2, #32]
 8001606:	4b31      	ldr	r3, [pc, #196]	; (80016cc <HAL_RCC_OscConfig+0x91c>)
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4a30      	ldr	r2, [pc, #192]	; (80016cc <HAL_RCC_OscConfig+0x91c>)
 800160c:	f023 0304 	bic.w	r3, r3, #4
 8001610:	6213      	str	r3, [r2, #32]
 8001612:	e01d      	b.n	8001650 <HAL_RCC_OscConfig+0x8a0>
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b05      	cmp	r3, #5
 800161c:	d10c      	bne.n	8001638 <HAL_RCC_OscConfig+0x888>
 800161e:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <HAL_RCC_OscConfig+0x91c>)
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	4a2a      	ldr	r2, [pc, #168]	; (80016cc <HAL_RCC_OscConfig+0x91c>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	6213      	str	r3, [r2, #32]
 800162a:	4b28      	ldr	r3, [pc, #160]	; (80016cc <HAL_RCC_OscConfig+0x91c>)
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	4a27      	ldr	r2, [pc, #156]	; (80016cc <HAL_RCC_OscConfig+0x91c>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6213      	str	r3, [r2, #32]
 8001636:	e00b      	b.n	8001650 <HAL_RCC_OscConfig+0x8a0>
 8001638:	4b24      	ldr	r3, [pc, #144]	; (80016cc <HAL_RCC_OscConfig+0x91c>)
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	4a23      	ldr	r2, [pc, #140]	; (80016cc <HAL_RCC_OscConfig+0x91c>)
 800163e:	f023 0301 	bic.w	r3, r3, #1
 8001642:	6213      	str	r3, [r2, #32]
 8001644:	4b21      	ldr	r3, [pc, #132]	; (80016cc <HAL_RCC_OscConfig+0x91c>)
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4a20      	ldr	r2, [pc, #128]	; (80016cc <HAL_RCC_OscConfig+0x91c>)
 800164a:	f023 0304 	bic.w	r3, r3, #4
 800164e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d06a      	beq.n	8001730 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165a:	f7ff f915 	bl	8000888 <HAL_GetTick>
 800165e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001662:	e00b      	b.n	800167c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001664:	f7ff f910 	bl	8000888 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	f241 3288 	movw	r2, #5000	; 0x1388
 8001674:	4293      	cmp	r3, r2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e2a7      	b.n	8001bcc <HAL_RCC_OscConfig+0xe1c>
 800167c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001680:	2202      	movs	r2, #2
 8001682:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001684:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	fa93 f2a3 	rbit	r2, r3
 800168e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001698:	2202      	movs	r2, #2
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	fa93 f2a3 	rbit	r2, r3
 80016a6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80016aa:	601a      	str	r2, [r3, #0]
  return result;
 80016ac:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80016b0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b2:	fab3 f383 	clz	r3, r3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	095b      	lsrs	r3, r3, #5
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d108      	bne.n	80016d8 <HAL_RCC_OscConfig+0x928>
 80016c6:	4b01      	ldr	r3, [pc, #4]	; (80016cc <HAL_RCC_OscConfig+0x91c>)
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	e013      	b.n	80016f4 <HAL_RCC_OscConfig+0x944>
 80016cc:	40021000 	.word	0x40021000
 80016d0:	10908120 	.word	0x10908120
 80016d4:	40007000 	.word	0x40007000
 80016d8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016dc:	2202      	movs	r2, #2
 80016de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	fa93 f2a3 	rbit	r2, r3
 80016ea:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	4bc0      	ldr	r3, [pc, #768]	; (80019f4 <HAL_RCC_OscConfig+0xc44>)
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80016f8:	2102      	movs	r1, #2
 80016fa:	6011      	str	r1, [r2, #0]
 80016fc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	fa92 f1a2 	rbit	r1, r2
 8001706:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800170a:	6011      	str	r1, [r2, #0]
  return result;
 800170c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001710:	6812      	ldr	r2, [r2, #0]
 8001712:	fab2 f282 	clz	r2, r2
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	f002 021f 	and.w	r2, r2, #31
 8001722:	2101      	movs	r1, #1
 8001724:	fa01 f202 	lsl.w	r2, r1, r2
 8001728:	4013      	ands	r3, r2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d09a      	beq.n	8001664 <HAL_RCC_OscConfig+0x8b4>
 800172e:	e063      	b.n	80017f8 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001730:	f7ff f8aa 	bl	8000888 <HAL_GetTick>
 8001734:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001738:	e00b      	b.n	8001752 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800173a:	f7ff f8a5 	bl	8000888 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f241 3288 	movw	r2, #5000	; 0x1388
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e23c      	b.n	8001bcc <HAL_RCC_OscConfig+0xe1c>
 8001752:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001756:	2202      	movs	r2, #2
 8001758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	fa93 f2a3 	rbit	r2, r3
 8001764:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800176e:	2202      	movs	r2, #2
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	fa93 f2a3 	rbit	r2, r3
 800177c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001780:	601a      	str	r2, [r3, #0]
  return result;
 8001782:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001786:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001788:	fab3 f383 	clz	r3, r3
 800178c:	b2db      	uxtb	r3, r3
 800178e:	095b      	lsrs	r3, r3, #5
 8001790:	b2db      	uxtb	r3, r3
 8001792:	f043 0302 	orr.w	r3, r3, #2
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d102      	bne.n	80017a2 <HAL_RCC_OscConfig+0x9f2>
 800179c:	4b95      	ldr	r3, [pc, #596]	; (80019f4 <HAL_RCC_OscConfig+0xc44>)
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	e00d      	b.n	80017be <HAL_RCC_OscConfig+0xa0e>
 80017a2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017a6:	2202      	movs	r2, #2
 80017a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017aa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	fa93 f2a3 	rbit	r2, r3
 80017b4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	4b8e      	ldr	r3, [pc, #568]	; (80019f4 <HAL_RCC_OscConfig+0xc44>)
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80017c2:	2102      	movs	r1, #2
 80017c4:	6011      	str	r1, [r2, #0]
 80017c6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	fa92 f1a2 	rbit	r1, r2
 80017d0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80017d4:	6011      	str	r1, [r2, #0]
  return result;
 80017d6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	fab2 f282 	clz	r2, r2
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	f002 021f 	and.w	r2, r2, #31
 80017ec:	2101      	movs	r1, #1
 80017ee:	fa01 f202 	lsl.w	r2, r1, r2
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1a0      	bne.n	800173a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017f8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d105      	bne.n	800180c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001800:	4b7c      	ldr	r3, [pc, #496]	; (80019f4 <HAL_RCC_OscConfig+0xc44>)
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	4a7b      	ldr	r2, [pc, #492]	; (80019f4 <HAL_RCC_OscConfig+0xc44>)
 8001806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800180a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 81d9 	beq.w	8001bca <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001818:	4b76      	ldr	r3, [pc, #472]	; (80019f4 <HAL_RCC_OscConfig+0xc44>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 030c 	and.w	r3, r3, #12
 8001820:	2b08      	cmp	r3, #8
 8001822:	f000 81a6 	beq.w	8001b72 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	2b02      	cmp	r3, #2
 800182e:	f040 811e 	bne.w	8001a6e <HAL_RCC_OscConfig+0xcbe>
 8001832:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001836:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800183a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	fa93 f2a3 	rbit	r2, r3
 8001846:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800184a:	601a      	str	r2, [r3, #0]
  return result;
 800184c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001850:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001852:	fab3 f383 	clz	r3, r3
 8001856:	b2db      	uxtb	r3, r3
 8001858:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800185c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	461a      	mov	r2, r3
 8001864:	2300      	movs	r3, #0
 8001866:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff f80e 	bl	8000888 <HAL_GetTick>
 800186c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001870:	e009      	b.n	8001886 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001872:	f7ff f809 	bl	8000888 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e1a2      	b.n	8001bcc <HAL_RCC_OscConfig+0xe1c>
 8001886:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800188a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800188e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	fa93 f2a3 	rbit	r2, r3
 800189a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800189e:	601a      	str	r2, [r3, #0]
  return result;
 80018a0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a6:	fab3 f383 	clz	r3, r3
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	095b      	lsrs	r3, r3, #5
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d102      	bne.n	80018c0 <HAL_RCC_OscConfig+0xb10>
 80018ba:	4b4e      	ldr	r3, [pc, #312]	; (80019f4 <HAL_RCC_OscConfig+0xc44>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	e01b      	b.n	80018f8 <HAL_RCC_OscConfig+0xb48>
 80018c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	fa93 f2a3 	rbit	r2, r3
 80018d4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	fa93 f2a3 	rbit	r2, r3
 80018ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	4b3f      	ldr	r3, [pc, #252]	; (80019f4 <HAL_RCC_OscConfig+0xc44>)
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80018fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001900:	6011      	str	r1, [r2, #0]
 8001902:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	fa92 f1a2 	rbit	r1, r2
 800190c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001910:	6011      	str	r1, [r2, #0]
  return result;
 8001912:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	fab2 f282 	clz	r2, r2
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	f042 0220 	orr.w	r2, r2, #32
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	f002 021f 	and.w	r2, r2, #31
 8001928:	2101      	movs	r1, #1
 800192a:	fa01 f202 	lsl.w	r2, r1, r2
 800192e:	4013      	ands	r3, r2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d19e      	bne.n	8001872 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001934:	4b2f      	ldr	r3, [pc, #188]	; (80019f4 <HAL_RCC_OscConfig+0xc44>)
 8001936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001938:	f023 020f 	bic.w	r2, r3, #15
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	492c      	ldr	r1, [pc, #176]	; (80019f4 <HAL_RCC_OscConfig+0xc44>)
 8001944:	4313      	orrs	r3, r2
 8001946:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001948:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <HAL_RCC_OscConfig+0xc44>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6a19      	ldr	r1, [r3, #32]
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	430b      	orrs	r3, r1
 800195e:	4925      	ldr	r1, [pc, #148]	; (80019f4 <HAL_RCC_OscConfig+0xc44>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
 8001964:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001968:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800196c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	fa93 f2a3 	rbit	r2, r3
 8001978:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800197c:	601a      	str	r2, [r3, #0]
  return result;
 800197e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001982:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001984:	fab3 f383 	clz	r3, r3
 8001988:	b2db      	uxtb	r3, r3
 800198a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800198e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	461a      	mov	r2, r3
 8001996:	2301      	movs	r3, #1
 8001998:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7fe ff75 	bl	8000888 <HAL_GetTick>
 800199e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a2:	e009      	b.n	80019b8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a4:	f7fe ff70 	bl	8000888 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e109      	b.n	8001bcc <HAL_RCC_OscConfig+0xe1c>
 80019b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	fa93 f2a3 	rbit	r2, r3
 80019cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019d0:	601a      	str	r2, [r3, #0]
  return result;
 80019d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019d8:	fab3 f383 	clz	r3, r3
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	095b      	lsrs	r3, r3, #5
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d105      	bne.n	80019f8 <HAL_RCC_OscConfig+0xc48>
 80019ec:	4b01      	ldr	r3, [pc, #4]	; (80019f4 <HAL_RCC_OscConfig+0xc44>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	e01e      	b.n	8001a30 <HAL_RCC_OscConfig+0xc80>
 80019f2:	bf00      	nop
 80019f4:	40021000 	.word	0x40021000
 80019f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	fa93 f2a3 	rbit	r2, r3
 8001a0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	fa93 f2a3 	rbit	r2, r3
 8001a26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	4b6a      	ldr	r3, [pc, #424]	; (8001bd8 <HAL_RCC_OscConfig+0xe28>)
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a30:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a34:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a38:	6011      	str	r1, [r2, #0]
 8001a3a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	fa92 f1a2 	rbit	r1, r2
 8001a44:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a48:	6011      	str	r1, [r2, #0]
  return result;
 8001a4a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	fab2 f282 	clz	r2, r2
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	f042 0220 	orr.w	r2, r2, #32
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	f002 021f 	and.w	r2, r2, #31
 8001a60:	2101      	movs	r1, #1
 8001a62:	fa01 f202 	lsl.w	r2, r1, r2
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d09b      	beq.n	80019a4 <HAL_RCC_OscConfig+0xbf4>
 8001a6c:	e0ad      	b.n	8001bca <HAL_RCC_OscConfig+0xe1a>
 8001a6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	fa93 f2a3 	rbit	r2, r3
 8001a82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a86:	601a      	str	r2, [r3, #0]
  return result;
 8001a88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a8c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8e:	fab3 f383 	clz	r3, r3
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7fe fef0 	bl	8000888 <HAL_GetTick>
 8001aa8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aac:	e009      	b.n	8001ac2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aae:	f7fe feeb 	bl	8000888 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e084      	b.n	8001bcc <HAL_RCC_OscConfig+0xe1c>
 8001ac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	fa93 f2a3 	rbit	r2, r3
 8001ad6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ada:	601a      	str	r2, [r3, #0]
  return result;
 8001adc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ae0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae2:	fab3 f383 	clz	r3, r3
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	095b      	lsrs	r3, r3, #5
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d102      	bne.n	8001afc <HAL_RCC_OscConfig+0xd4c>
 8001af6:	4b38      	ldr	r3, [pc, #224]	; (8001bd8 <HAL_RCC_OscConfig+0xe28>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	e01b      	b.n	8001b34 <HAL_RCC_OscConfig+0xd84>
 8001afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	fa93 f2a3 	rbit	r2, r3
 8001b10:	f107 0320 	add.w	r3, r7, #32
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	f107 031c 	add.w	r3, r7, #28
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	fa93 f2a3 	rbit	r2, r3
 8001b2a:	f107 0318 	add.w	r3, r7, #24
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <HAL_RCC_OscConfig+0xe28>)
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	f107 0214 	add.w	r2, r7, #20
 8001b38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b3c:	6011      	str	r1, [r2, #0]
 8001b3e:	f107 0214 	add.w	r2, r7, #20
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	fa92 f1a2 	rbit	r1, r2
 8001b48:	f107 0210 	add.w	r2, r7, #16
 8001b4c:	6011      	str	r1, [r2, #0]
  return result;
 8001b4e:	f107 0210 	add.w	r2, r7, #16
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	fab2 f282 	clz	r2, r2
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	f042 0220 	orr.w	r2, r2, #32
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	f002 021f 	and.w	r2, r2, #31
 8001b64:	2101      	movs	r1, #1
 8001b66:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d19e      	bne.n	8001aae <HAL_RCC_OscConfig+0xcfe>
 8001b70:	e02b      	b.n	8001bca <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e025      	b.n	8001bcc <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_RCC_OscConfig+0xe28>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <HAL_RCC_OscConfig+0xe28>)
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b90:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b94:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d111      	bne.n	8001bc6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ba2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001ba6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d108      	bne.n	8001bc6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001bb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bb8:	f003 020f 	and.w	r2, r3, #15
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d001      	beq.n	8001bca <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000

08001bdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b09e      	sub	sp, #120	; 0x78
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e162      	b.n	8001eba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf4:	4b90      	ldr	r3, [pc, #576]	; (8001e38 <HAL_RCC_ClockConfig+0x25c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d910      	bls.n	8001c24 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c02:	4b8d      	ldr	r3, [pc, #564]	; (8001e38 <HAL_RCC_ClockConfig+0x25c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f023 0207 	bic.w	r2, r3, #7
 8001c0a:	498b      	ldr	r1, [pc, #556]	; (8001e38 <HAL_RCC_ClockConfig+0x25c>)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c12:	4b89      	ldr	r3, [pc, #548]	; (8001e38 <HAL_RCC_ClockConfig+0x25c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e14a      	b.n	8001eba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d008      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c30:	4b82      	ldr	r3, [pc, #520]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	497f      	ldr	r1, [pc, #508]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 80dc 	beq.w	8001e08 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d13c      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xf6>
 8001c58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c5c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c68:	fab3 f383 	clz	r3, r3
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d102      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xa6>
 8001c7c:	4b6f      	ldr	r3, [pc, #444]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	e00f      	b.n	8001ca2 <HAL_RCC_ClockConfig+0xc6>
 8001c82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c8a:	fa93 f3a3 	rbit	r3, r3
 8001c8e:	667b      	str	r3, [r7, #100]	; 0x64
 8001c90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c94:	663b      	str	r3, [r7, #96]	; 0x60
 8001c96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c98:	fa93 f3a3 	rbit	r3, r3
 8001c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c9e:	4b67      	ldr	r3, [pc, #412]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ca6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ca8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001caa:	fa92 f2a2 	rbit	r2, r2
 8001cae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001cb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cb2:	fab2 f282 	clz	r2, r2
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	f042 0220 	orr.w	r2, r2, #32
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	f002 021f 	and.w	r2, r2, #31
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d17b      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e0f3      	b.n	8001eba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d13c      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x178>
 8001cda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cde:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ce2:	fa93 f3a3 	rbit	r3, r3
 8001ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	095b      	lsrs	r3, r3, #5
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d102      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x128>
 8001cfe:	4b4f      	ldr	r3, [pc, #316]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	e00f      	b.n	8001d24 <HAL_RCC_ClockConfig+0x148>
 8001d04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	647b      	str	r3, [r7, #68]	; 0x44
 8001d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d16:	643b      	str	r3, [r7, #64]	; 0x40
 8001d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d20:	4b46      	ldr	r3, [pc, #280]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d28:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d2c:	fa92 f2a2 	rbit	r2, r2
 8001d30:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001d32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d34:	fab2 f282 	clz	r2, r2
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	f042 0220 	orr.w	r2, r2, #32
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	f002 021f 	and.w	r2, r2, #31
 8001d44:	2101      	movs	r1, #1
 8001d46:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d13a      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0b2      	b.n	8001eba <HAL_RCC_ClockConfig+0x2de>
 8001d54:	2302      	movs	r3, #2
 8001d56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5a:	fa93 f3a3 	rbit	r3, r3
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	095b      	lsrs	r3, r3, #5
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d102      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x1a0>
 8001d76:	4b31      	ldr	r3, [pc, #196]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	e00d      	b.n	8001d98 <HAL_RCC_ClockConfig+0x1bc>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d82:	fa93 f3a3 	rbit	r3, r3
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
 8001d88:	2302      	movs	r3, #2
 8001d8a:	623b      	str	r3, [r7, #32]
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	2202      	movs	r2, #2
 8001d9a:	61ba      	str	r2, [r7, #24]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	fa92 f2a2 	rbit	r2, r2
 8001da2:	617a      	str	r2, [r7, #20]
  return result;
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	fab2 f282 	clz	r2, r2
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	f042 0220 	orr.w	r2, r2, #32
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	f002 021f 	and.w	r2, r2, #31
 8001db6:	2101      	movs	r1, #1
 8001db8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e079      	b.n	8001eba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dc6:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f023 0203 	bic.w	r2, r3, #3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	491a      	ldr	r1, [pc, #104]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd8:	f7fe fd56 	bl	8000888 <HAL_GetTick>
 8001ddc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dde:	e00a      	b.n	8001df6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de0:	f7fe fd52 	bl	8000888 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e061      	b.n	8001eba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 020c 	and.w	r2, r3, #12
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d1eb      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_RCC_ClockConfig+0x25c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d214      	bcs.n	8001e40 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <HAL_RCC_ClockConfig+0x25c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 0207 	bic.w	r2, r3, #7
 8001e1e:	4906      	ldr	r1, [pc, #24]	; (8001e38 <HAL_RCC_ClockConfig+0x25c>)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e26:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <HAL_RCC_ClockConfig+0x25c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e040      	b.n	8001eba <HAL_RCC_ClockConfig+0x2de>
 8001e38:	40022000 	.word	0x40022000
 8001e3c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d008      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	491a      	ldr	r1, [pc, #104]	; (8001ec4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d009      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e6a:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4912      	ldr	r1, [pc, #72]	; (8001ec4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e7e:	f000 f829 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8001e82:	4601      	mov	r1, r0
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e8c:	22f0      	movs	r2, #240	; 0xf0
 8001e8e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	fa92 f2a2 	rbit	r2, r2
 8001e96:	60fa      	str	r2, [r7, #12]
  return result;
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	fab2 f282 	clz	r2, r2
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	40d3      	lsrs	r3, r2
 8001ea2:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <HAL_RCC_ClockConfig+0x2ec>)
 8001ea4:	5cd3      	ldrb	r3, [r2, r3]
 8001ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8001eaa:	4a08      	ldr	r2, [pc, #32]	; (8001ecc <HAL_RCC_ClockConfig+0x2f0>)
 8001eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <HAL_RCC_ClockConfig+0x2f4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe fca4 	bl	8000800 <HAL_InitTick>
  
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3778      	adds	r7, #120	; 0x78
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	080039ec 	.word	0x080039ec
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	20000004 	.word	0x20000004

08001ed4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b08b      	sub	sp, #44	; 0x2c
 8001ed8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001eee:	4b2a      	ldr	r3, [pc, #168]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d002      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0x30>
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d003      	beq.n	8001f0a <HAL_RCC_GetSysClockFreq+0x36>
 8001f02:	e03f      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f04:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f06:	623b      	str	r3, [r7, #32]
      break;
 8001f08:	e03f      	b.n	8001f8a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f10:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001f14:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	fa92 f2a2 	rbit	r2, r2
 8001f1c:	607a      	str	r2, [r7, #4]
  return result;
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	fab2 f282 	clz	r2, r2
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	40d3      	lsrs	r3, r2
 8001f28:	4a1d      	ldr	r2, [pc, #116]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f2a:	5cd3      	ldrb	r3, [r2, r3]
 8001f2c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f2e:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	220f      	movs	r2, #15
 8001f38:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	fa92 f2a2 	rbit	r2, r2
 8001f40:	60fa      	str	r2, [r7, #12]
  return result;
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	fab2 f282 	clz	r2, r2
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	40d3      	lsrs	r3, r2
 8001f4c:	4a15      	ldr	r2, [pc, #84]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f4e:	5cd3      	ldrb	r3, [r2, r3]
 8001f50:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f5c:	4a0f      	ldr	r2, [pc, #60]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fb02 f303 	mul.w	r3, r2, r3
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6c:	e007      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f6e:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	fb02 f303 	mul.w	r3, r2, r3
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	623b      	str	r3, [r7, #32]
      break;
 8001f82:	e002      	b.n	8001f8a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f86:	623b      	str	r3, [r7, #32]
      break;
 8001f88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	372c      	adds	r7, #44	; 0x2c
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	007a1200 	.word	0x007a1200
 8001fa0:	08003a04 	.word	0x08003a04
 8001fa4:	08003a14 	.word	0x08003a14

08001fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000000 	.word	0x20000000

08001fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001fc6:	f7ff ffef 	bl	8001fa8 <HAL_RCC_GetHCLKFreq>
 8001fca:	4601      	mov	r1, r0
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fd4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001fd8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	fa92 f2a2 	rbit	r2, r2
 8001fe0:	603a      	str	r2, [r7, #0]
  return result;
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	fab2 f282 	clz	r2, r2
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	40d3      	lsrs	r3, r2
 8001fec:	4a04      	ldr	r2, [pc, #16]	; (8002000 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001fee:	5cd3      	ldrb	r3, [r2, r3]
 8001ff0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40021000 	.word	0x40021000
 8002000:	080039fc 	.word	0x080039fc

08002004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800200a:	f7ff ffcd 	bl	8001fa8 <HAL_RCC_GetHCLKFreq>
 800200e:	4601      	mov	r1, r0
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002018:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800201c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	fa92 f2a2 	rbit	r2, r2
 8002024:	603a      	str	r2, [r7, #0]
  return result;
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	fab2 f282 	clz	r2, r2
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	40d3      	lsrs	r3, r2
 8002030:	4a04      	ldr	r2, [pc, #16]	; (8002044 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002032:	5cd3      	ldrb	r3, [r2, r3]
 8002034:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40021000 	.word	0x40021000
 8002044:	080039fc 	.word	0x080039fc

08002048 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b092      	sub	sp, #72	; 0x48
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002058:	2300      	movs	r3, #0
 800205a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 80d4 	beq.w	8002214 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206c:	4b4e      	ldr	r3, [pc, #312]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10e      	bne.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002078:	4b4b      	ldr	r3, [pc, #300]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	4a4a      	ldr	r2, [pc, #296]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800207e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002082:	61d3      	str	r3, [r2, #28]
 8002084:	4b48      	ldr	r3, [pc, #288]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002090:	2301      	movs	r3, #1
 8002092:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002096:	4b45      	ldr	r3, [pc, #276]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d118      	bne.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a2:	4b42      	ldr	r3, [pc, #264]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a41      	ldr	r2, [pc, #260]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ae:	f7fe fbeb 	bl	8000888 <HAL_GetTick>
 80020b2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b4:	e008      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b6:	f7fe fbe7 	bl	8000888 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b64      	cmp	r3, #100	; 0x64
 80020c2:	d901      	bls.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e1d6      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c8:	4b38      	ldr	r3, [pc, #224]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0f0      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020d4:	4b34      	ldr	r3, [pc, #208]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 8084 	beq.w	80021ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d07c      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020f4:	4b2c      	ldr	r3, [pc, #176]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002102:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002106:	fa93 f3a3 	rbit	r3, r3
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800210c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	461a      	mov	r2, r3
 8002116:	4b26      	ldr	r3, [pc, #152]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	461a      	mov	r2, r3
 800211e:	2301      	movs	r3, #1
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002126:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	461a      	mov	r2, r3
 800213a:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	461a      	mov	r2, r3
 8002142:	2300      	movs	r3, #0
 8002144:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002146:	4a18      	ldr	r2, [pc, #96]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800214a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800214c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d04b      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002156:	f7fe fb97 	bl	8000888 <HAL_GetTick>
 800215a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215c:	e00a      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215e:	f7fe fb93 	bl	8000888 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	f241 3288 	movw	r2, #5000	; 0x1388
 800216c:	4293      	cmp	r3, r2
 800216e:	d901      	bls.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e180      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002174:	2302      	movs	r3, #2
 8002176:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
 8002180:	2302      	movs	r3, #2
 8002182:	623b      	str	r3, [r7, #32]
 8002184:	6a3b      	ldr	r3, [r7, #32]
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	61fb      	str	r3, [r7, #28]
  return result;
 800218c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218e:	fab3 f383 	clz	r3, r3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	095b      	lsrs	r3, r3, #5
 8002196:	b2db      	uxtb	r3, r3
 8002198:	f043 0302 	orr.w	r3, r3, #2
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d108      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80021a2:	4b01      	ldr	r3, [pc, #4]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	e00d      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40007000 	.word	0x40007000
 80021b0:	10908100 	.word	0x10908100
 80021b4:	2302      	movs	r3, #2
 80021b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	fa93 f3a3 	rbit	r3, r3
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	4ba0      	ldr	r3, [pc, #640]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	2202      	movs	r2, #2
 80021c6:	613a      	str	r2, [r7, #16]
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	fa92 f2a2 	rbit	r2, r2
 80021ce:	60fa      	str	r2, [r7, #12]
  return result;
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	fab2 f282 	clz	r2, r2
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	f002 021f 	and.w	r2, r2, #31
 80021e2:	2101      	movs	r1, #1
 80021e4:	fa01 f202 	lsl.w	r2, r1, r2
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0b7      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80021ee:	4b95      	ldr	r3, [pc, #596]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	4992      	ldr	r1, [pc, #584]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002200:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002204:	2b01      	cmp	r3, #1
 8002206:	d105      	bne.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002208:	4b8e      	ldr	r3, [pc, #568]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	4a8d      	ldr	r2, [pc, #564]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800220e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002212:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002220:	4b88      	ldr	r3, [pc, #544]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002224:	f023 0203 	bic.w	r2, r3, #3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	4985      	ldr	r1, [pc, #532]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800222e:	4313      	orrs	r3, r2
 8002230:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d008      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800223e:	4b81      	ldr	r3, [pc, #516]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	497e      	ldr	r1, [pc, #504]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800224c:	4313      	orrs	r3, r2
 800224e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d008      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800225c:	4b79      	ldr	r3, [pc, #484]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	4976      	ldr	r1, [pc, #472]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800226a:	4313      	orrs	r3, r2
 800226c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0320 	and.w	r3, r3, #32
 8002276:	2b00      	cmp	r3, #0
 8002278:	d008      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800227a:	4b72      	ldr	r3, [pc, #456]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f023 0210 	bic.w	r2, r3, #16
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	496f      	ldr	r1, [pc, #444]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002288:	4313      	orrs	r3, r2
 800228a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002298:	4b6a      	ldr	r3, [pc, #424]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a4:	4967      	ldr	r1, [pc, #412]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022b6:	4b63      	ldr	r3, [pc, #396]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f023 0220 	bic.w	r2, r3, #32
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4960      	ldr	r1, [pc, #384]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022d4:	4b5b      	ldr	r3, [pc, #364]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	4958      	ldr	r1, [pc, #352]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d008      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022f2:	4b54      	ldr	r3, [pc, #336]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	4951      	ldr	r1, [pc, #324]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002300:	4313      	orrs	r3, r2
 8002302:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002310:	4b4c      	ldr	r3, [pc, #304]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	4949      	ldr	r1, [pc, #292]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800231e:	4313      	orrs	r3, r2
 8002320:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800232e:	4b45      	ldr	r3, [pc, #276]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4942      	ldr	r1, [pc, #264]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800234c:	4b3d      	ldr	r3, [pc, #244]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800234e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002350:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002358:	493a      	ldr	r1, [pc, #232]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800235a:	4313      	orrs	r3, r2
 800235c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d008      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800236a:	4b36      	ldr	r3, [pc, #216]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	4933      	ldr	r1, [pc, #204]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002378:	4313      	orrs	r3, r2
 800237a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002388:	4b2e      	ldr	r3, [pc, #184]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002394:	492b      	ldr	r1, [pc, #172]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002396:	4313      	orrs	r3, r2
 8002398:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d008      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80023a6:	4b27      	ldr	r3, [pc, #156]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	4924      	ldr	r1, [pc, #144]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80023c4:	4b1f      	ldr	r3, [pc, #124]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d0:	491c      	ldr	r1, [pc, #112]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d008      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80023e2:	4b18      	ldr	r3, [pc, #96]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ee:	4915      	ldr	r1, [pc, #84]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002400:	4b10      	ldr	r3, [pc, #64]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240c:	490d      	ldr	r1, [pc, #52]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d008      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800241e:	4b09      	ldr	r3, [pc, #36]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800242a:	4906      	ldr	r1, [pc, #24]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800242c:	4313      	orrs	r3, r2
 800242e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00c      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800243c:	4b01      	ldr	r3, [pc, #4]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	e002      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002450:	490b      	ldr	r1, [pc, #44]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002452:	4313      	orrs	r3, r2
 8002454:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d008      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800246e:	4904      	ldr	r1, [pc, #16]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002470:	4313      	orrs	r3, r2
 8002472:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3748      	adds	r7, #72	; 0x48
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000

08002484 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e040      	b.n	8002518 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800249a:	2b00      	cmp	r3, #0
 800249c:	d106      	bne.n	80024ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7fe f81c 	bl	80004e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2224      	movs	r2, #36	; 0x24
 80024b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0201 	bic.w	r2, r2, #1
 80024c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f82c 	bl	8002520 <UART_SetConfig>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e022      	b.n	8002518 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f9f4 	bl	80028c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0201 	orr.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 fa7b 	bl	8002a0c <UART_CheckIdleState>
 8002516:	4603      	mov	r3, r0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	4313      	orrs	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	4baa      	ldr	r3, [pc, #680]	; (80027f4 <UART_SetConfig+0x2d4>)
 800254c:	4013      	ands	r3, r2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	6979      	ldr	r1, [r7, #20]
 8002554:	430b      	orrs	r3, r1
 8002556:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	4313      	orrs	r3, r2
 800257c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	430a      	orrs	r2, r1
 8002590:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a98      	ldr	r2, [pc, #608]	; (80027f8 <UART_SetConfig+0x2d8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d121      	bne.n	80025e0 <UART_SetConfig+0xc0>
 800259c:	4b97      	ldr	r3, [pc, #604]	; (80027fc <UART_SetConfig+0x2dc>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d817      	bhi.n	80025d8 <UART_SetConfig+0xb8>
 80025a8:	a201      	add	r2, pc, #4	; (adr r2, 80025b0 <UART_SetConfig+0x90>)
 80025aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ae:	bf00      	nop
 80025b0:	080025c1 	.word	0x080025c1
 80025b4:	080025cd 	.word	0x080025cd
 80025b8:	080025d3 	.word	0x080025d3
 80025bc:	080025c7 	.word	0x080025c7
 80025c0:	2301      	movs	r3, #1
 80025c2:	77fb      	strb	r3, [r7, #31]
 80025c4:	e0b2      	b.n	800272c <UART_SetConfig+0x20c>
 80025c6:	2302      	movs	r3, #2
 80025c8:	77fb      	strb	r3, [r7, #31]
 80025ca:	e0af      	b.n	800272c <UART_SetConfig+0x20c>
 80025cc:	2304      	movs	r3, #4
 80025ce:	77fb      	strb	r3, [r7, #31]
 80025d0:	e0ac      	b.n	800272c <UART_SetConfig+0x20c>
 80025d2:	2308      	movs	r3, #8
 80025d4:	77fb      	strb	r3, [r7, #31]
 80025d6:	e0a9      	b.n	800272c <UART_SetConfig+0x20c>
 80025d8:	2310      	movs	r3, #16
 80025da:	77fb      	strb	r3, [r7, #31]
 80025dc:	bf00      	nop
 80025de:	e0a5      	b.n	800272c <UART_SetConfig+0x20c>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a86      	ldr	r2, [pc, #536]	; (8002800 <UART_SetConfig+0x2e0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d123      	bne.n	8002632 <UART_SetConfig+0x112>
 80025ea:	4b84      	ldr	r3, [pc, #528]	; (80027fc <UART_SetConfig+0x2dc>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f6:	d012      	beq.n	800261e <UART_SetConfig+0xfe>
 80025f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025fc:	d802      	bhi.n	8002604 <UART_SetConfig+0xe4>
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <UART_SetConfig+0xf2>
 8002602:	e012      	b.n	800262a <UART_SetConfig+0x10a>
 8002604:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002608:	d00c      	beq.n	8002624 <UART_SetConfig+0x104>
 800260a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800260e:	d003      	beq.n	8002618 <UART_SetConfig+0xf8>
 8002610:	e00b      	b.n	800262a <UART_SetConfig+0x10a>
 8002612:	2300      	movs	r3, #0
 8002614:	77fb      	strb	r3, [r7, #31]
 8002616:	e089      	b.n	800272c <UART_SetConfig+0x20c>
 8002618:	2302      	movs	r3, #2
 800261a:	77fb      	strb	r3, [r7, #31]
 800261c:	e086      	b.n	800272c <UART_SetConfig+0x20c>
 800261e:	2304      	movs	r3, #4
 8002620:	77fb      	strb	r3, [r7, #31]
 8002622:	e083      	b.n	800272c <UART_SetConfig+0x20c>
 8002624:	2308      	movs	r3, #8
 8002626:	77fb      	strb	r3, [r7, #31]
 8002628:	e080      	b.n	800272c <UART_SetConfig+0x20c>
 800262a:	2310      	movs	r3, #16
 800262c:	77fb      	strb	r3, [r7, #31]
 800262e:	bf00      	nop
 8002630:	e07c      	b.n	800272c <UART_SetConfig+0x20c>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a73      	ldr	r2, [pc, #460]	; (8002804 <UART_SetConfig+0x2e4>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d123      	bne.n	8002684 <UART_SetConfig+0x164>
 800263c:	4b6f      	ldr	r3, [pc, #444]	; (80027fc <UART_SetConfig+0x2dc>)
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002644:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002648:	d012      	beq.n	8002670 <UART_SetConfig+0x150>
 800264a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800264e:	d802      	bhi.n	8002656 <UART_SetConfig+0x136>
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <UART_SetConfig+0x144>
 8002654:	e012      	b.n	800267c <UART_SetConfig+0x15c>
 8002656:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800265a:	d00c      	beq.n	8002676 <UART_SetConfig+0x156>
 800265c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002660:	d003      	beq.n	800266a <UART_SetConfig+0x14a>
 8002662:	e00b      	b.n	800267c <UART_SetConfig+0x15c>
 8002664:	2300      	movs	r3, #0
 8002666:	77fb      	strb	r3, [r7, #31]
 8002668:	e060      	b.n	800272c <UART_SetConfig+0x20c>
 800266a:	2302      	movs	r3, #2
 800266c:	77fb      	strb	r3, [r7, #31]
 800266e:	e05d      	b.n	800272c <UART_SetConfig+0x20c>
 8002670:	2304      	movs	r3, #4
 8002672:	77fb      	strb	r3, [r7, #31]
 8002674:	e05a      	b.n	800272c <UART_SetConfig+0x20c>
 8002676:	2308      	movs	r3, #8
 8002678:	77fb      	strb	r3, [r7, #31]
 800267a:	e057      	b.n	800272c <UART_SetConfig+0x20c>
 800267c:	2310      	movs	r3, #16
 800267e:	77fb      	strb	r3, [r7, #31]
 8002680:	bf00      	nop
 8002682:	e053      	b.n	800272c <UART_SetConfig+0x20c>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a5f      	ldr	r2, [pc, #380]	; (8002808 <UART_SetConfig+0x2e8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d123      	bne.n	80026d6 <UART_SetConfig+0x1b6>
 800268e:	4b5b      	ldr	r3, [pc, #364]	; (80027fc <UART_SetConfig+0x2dc>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800269a:	d012      	beq.n	80026c2 <UART_SetConfig+0x1a2>
 800269c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a0:	d802      	bhi.n	80026a8 <UART_SetConfig+0x188>
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d007      	beq.n	80026b6 <UART_SetConfig+0x196>
 80026a6:	e012      	b.n	80026ce <UART_SetConfig+0x1ae>
 80026a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026ac:	d00c      	beq.n	80026c8 <UART_SetConfig+0x1a8>
 80026ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026b2:	d003      	beq.n	80026bc <UART_SetConfig+0x19c>
 80026b4:	e00b      	b.n	80026ce <UART_SetConfig+0x1ae>
 80026b6:	2300      	movs	r3, #0
 80026b8:	77fb      	strb	r3, [r7, #31]
 80026ba:	e037      	b.n	800272c <UART_SetConfig+0x20c>
 80026bc:	2302      	movs	r3, #2
 80026be:	77fb      	strb	r3, [r7, #31]
 80026c0:	e034      	b.n	800272c <UART_SetConfig+0x20c>
 80026c2:	2304      	movs	r3, #4
 80026c4:	77fb      	strb	r3, [r7, #31]
 80026c6:	e031      	b.n	800272c <UART_SetConfig+0x20c>
 80026c8:	2308      	movs	r3, #8
 80026ca:	77fb      	strb	r3, [r7, #31]
 80026cc:	e02e      	b.n	800272c <UART_SetConfig+0x20c>
 80026ce:	2310      	movs	r3, #16
 80026d0:	77fb      	strb	r3, [r7, #31]
 80026d2:	bf00      	nop
 80026d4:	e02a      	b.n	800272c <UART_SetConfig+0x20c>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a4c      	ldr	r2, [pc, #304]	; (800280c <UART_SetConfig+0x2ec>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d123      	bne.n	8002728 <UART_SetConfig+0x208>
 80026e0:	4b46      	ldr	r3, [pc, #280]	; (80027fc <UART_SetConfig+0x2dc>)
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80026e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ec:	d012      	beq.n	8002714 <UART_SetConfig+0x1f4>
 80026ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f2:	d802      	bhi.n	80026fa <UART_SetConfig+0x1da>
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d007      	beq.n	8002708 <UART_SetConfig+0x1e8>
 80026f8:	e012      	b.n	8002720 <UART_SetConfig+0x200>
 80026fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026fe:	d00c      	beq.n	800271a <UART_SetConfig+0x1fa>
 8002700:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002704:	d003      	beq.n	800270e <UART_SetConfig+0x1ee>
 8002706:	e00b      	b.n	8002720 <UART_SetConfig+0x200>
 8002708:	2300      	movs	r3, #0
 800270a:	77fb      	strb	r3, [r7, #31]
 800270c:	e00e      	b.n	800272c <UART_SetConfig+0x20c>
 800270e:	2302      	movs	r3, #2
 8002710:	77fb      	strb	r3, [r7, #31]
 8002712:	e00b      	b.n	800272c <UART_SetConfig+0x20c>
 8002714:	2304      	movs	r3, #4
 8002716:	77fb      	strb	r3, [r7, #31]
 8002718:	e008      	b.n	800272c <UART_SetConfig+0x20c>
 800271a:	2308      	movs	r3, #8
 800271c:	77fb      	strb	r3, [r7, #31]
 800271e:	e005      	b.n	800272c <UART_SetConfig+0x20c>
 8002720:	2310      	movs	r3, #16
 8002722:	77fb      	strb	r3, [r7, #31]
 8002724:	bf00      	nop
 8002726:	e001      	b.n	800272c <UART_SetConfig+0x20c>
 8002728:	2310      	movs	r3, #16
 800272a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002734:	d16e      	bne.n	8002814 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002736:	7ffb      	ldrb	r3, [r7, #31]
 8002738:	2b08      	cmp	r3, #8
 800273a:	d828      	bhi.n	800278e <UART_SetConfig+0x26e>
 800273c:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <UART_SetConfig+0x224>)
 800273e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002742:	bf00      	nop
 8002744:	08002769 	.word	0x08002769
 8002748:	08002771 	.word	0x08002771
 800274c:	08002779 	.word	0x08002779
 8002750:	0800278f 	.word	0x0800278f
 8002754:	0800277f 	.word	0x0800277f
 8002758:	0800278f 	.word	0x0800278f
 800275c:	0800278f 	.word	0x0800278f
 8002760:	0800278f 	.word	0x0800278f
 8002764:	08002787 	.word	0x08002787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002768:	f7ff fc2a 	bl	8001fc0 <HAL_RCC_GetPCLK1Freq>
 800276c:	61b8      	str	r0, [r7, #24]
        break;
 800276e:	e013      	b.n	8002798 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002770:	f7ff fc48 	bl	8002004 <HAL_RCC_GetPCLK2Freq>
 8002774:	61b8      	str	r0, [r7, #24]
        break;
 8002776:	e00f      	b.n	8002798 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002778:	4b25      	ldr	r3, [pc, #148]	; (8002810 <UART_SetConfig+0x2f0>)
 800277a:	61bb      	str	r3, [r7, #24]
        break;
 800277c:	e00c      	b.n	8002798 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800277e:	f7ff fba9 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8002782:	61b8      	str	r0, [r7, #24]
        break;
 8002784:	e008      	b.n	8002798 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800278a:	61bb      	str	r3, [r7, #24]
        break;
 800278c:	e004      	b.n	8002798 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	77bb      	strb	r3, [r7, #30]
        break;
 8002796:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 8086 	beq.w	80028ac <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	005a      	lsls	r2, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	085b      	lsrs	r3, r3, #1
 80027aa:	441a      	add	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	2b0f      	cmp	r3, #15
 80027bc:	d916      	bls.n	80027ec <UART_SetConfig+0x2cc>
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c4:	d212      	bcs.n	80027ec <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	f023 030f 	bic.w	r3, r3, #15
 80027ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	085b      	lsrs	r3, r3, #1
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	b29a      	uxth	r2, r3
 80027dc:	89fb      	ldrh	r3, [r7, #14]
 80027de:	4313      	orrs	r3, r2
 80027e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	89fa      	ldrh	r2, [r7, #14]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	e05f      	b.n	80028ac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	77bb      	strb	r3, [r7, #30]
 80027f0:	e05c      	b.n	80028ac <UART_SetConfig+0x38c>
 80027f2:	bf00      	nop
 80027f4:	efff69f3 	.word	0xefff69f3
 80027f8:	40013800 	.word	0x40013800
 80027fc:	40021000 	.word	0x40021000
 8002800:	40004400 	.word	0x40004400
 8002804:	40004800 	.word	0x40004800
 8002808:	40004c00 	.word	0x40004c00
 800280c:	40005000 	.word	0x40005000
 8002810:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8002814:	7ffb      	ldrb	r3, [r7, #31]
 8002816:	2b08      	cmp	r3, #8
 8002818:	d827      	bhi.n	800286a <UART_SetConfig+0x34a>
 800281a:	a201      	add	r2, pc, #4	; (adr r2, 8002820 <UART_SetConfig+0x300>)
 800281c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002820:	08002845 	.word	0x08002845
 8002824:	0800284d 	.word	0x0800284d
 8002828:	08002855 	.word	0x08002855
 800282c:	0800286b 	.word	0x0800286b
 8002830:	0800285b 	.word	0x0800285b
 8002834:	0800286b 	.word	0x0800286b
 8002838:	0800286b 	.word	0x0800286b
 800283c:	0800286b 	.word	0x0800286b
 8002840:	08002863 	.word	0x08002863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002844:	f7ff fbbc 	bl	8001fc0 <HAL_RCC_GetPCLK1Freq>
 8002848:	61b8      	str	r0, [r7, #24]
        break;
 800284a:	e013      	b.n	8002874 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800284c:	f7ff fbda 	bl	8002004 <HAL_RCC_GetPCLK2Freq>
 8002850:	61b8      	str	r0, [r7, #24]
        break;
 8002852:	e00f      	b.n	8002874 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002854:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <UART_SetConfig+0x3a4>)
 8002856:	61bb      	str	r3, [r7, #24]
        break;
 8002858:	e00c      	b.n	8002874 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800285a:	f7ff fb3b 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 800285e:	61b8      	str	r0, [r7, #24]
        break;
 8002860:	e008      	b.n	8002874 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002866:	61bb      	str	r3, [r7, #24]
        break;
 8002868:	e004      	b.n	8002874 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	77bb      	strb	r3, [r7, #30]
        break;
 8002872:	bf00      	nop
    }

    if (pclk != 0U)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d018      	beq.n	80028ac <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	085a      	lsrs	r2, r3, #1
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	441a      	add	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	fbb2 f3f3 	udiv	r3, r2, r3
 800288c:	b29b      	uxth	r3, r3
 800288e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	2b0f      	cmp	r3, #15
 8002894:	d908      	bls.n	80028a8 <UART_SetConfig+0x388>
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800289c:	d204      	bcs.n	80028a8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	e001      	b.n	80028ac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80028b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3720      	adds	r7, #32
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	007a1200 	.word	0x007a1200

080028c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00a      	beq.n	80028f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00a      	beq.n	8002936 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00a      	beq.n	8002958 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	f003 0310 	and.w	r3, r3, #16
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	f003 0320 	and.w	r3, r3, #32
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01a      	beq.n	80029de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029c6:	d10a      	bne.n	80029de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00a      	beq.n	8002a00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	605a      	str	r2, [r3, #4]
  }
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a1c:	f7fd ff34 	bl	8000888 <HAL_GetTick>
 8002a20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d10e      	bne.n	8002a4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f82d 	bl	8002a9e <UART_WaitOnFlagUntilTimeout>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e023      	b.n	8002a96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d10e      	bne.n	8002a7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f817 	bl	8002a9e <UART_WaitOnFlagUntilTimeout>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e00d      	b.n	8002a96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2220      	movs	r2, #32
 8002a84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	603b      	str	r3, [r7, #0]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aae:	e05e      	b.n	8002b6e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab6:	d05a      	beq.n	8002b6e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab8:	f7fd fee6 	bl	8000888 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d302      	bcc.n	8002ace <UART_WaitOnFlagUntilTimeout+0x30>
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d11b      	bne.n	8002b06 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002adc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0201 	bic.w	r2, r2, #1
 8002aec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2220      	movs	r2, #32
 8002af2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2220      	movs	r2, #32
 8002af8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e043      	b.n	8002b8e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d02c      	beq.n	8002b6e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b22:	d124      	bne.n	8002b6e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b3c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0201 	bic.w	r2, r2, #1
 8002b4c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2220      	movs	r2, #32
 8002b52:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e00f      	b.n	8002b8e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	69da      	ldr	r2, [r3, #28]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	4013      	ands	r3, r2
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	bf0c      	ite	eq
 8002b7e:	2301      	moveq	r3, #1
 8002b80:	2300      	movne	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d091      	beq.n	8002ab0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <__errno>:
 8002b98:	4b01      	ldr	r3, [pc, #4]	; (8002ba0 <__errno+0x8>)
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	2000000c 	.word	0x2000000c

08002ba4 <__libc_init_array>:
 8002ba4:	b570      	push	{r4, r5, r6, lr}
 8002ba6:	4e0d      	ldr	r6, [pc, #52]	; (8002bdc <__libc_init_array+0x38>)
 8002ba8:	4c0d      	ldr	r4, [pc, #52]	; (8002be0 <__libc_init_array+0x3c>)
 8002baa:	1ba4      	subs	r4, r4, r6
 8002bac:	10a4      	asrs	r4, r4, #2
 8002bae:	2500      	movs	r5, #0
 8002bb0:	42a5      	cmp	r5, r4
 8002bb2:	d109      	bne.n	8002bc8 <__libc_init_array+0x24>
 8002bb4:	4e0b      	ldr	r6, [pc, #44]	; (8002be4 <__libc_init_array+0x40>)
 8002bb6:	4c0c      	ldr	r4, [pc, #48]	; (8002be8 <__libc_init_array+0x44>)
 8002bb8:	f000 ff04 	bl	80039c4 <_init>
 8002bbc:	1ba4      	subs	r4, r4, r6
 8002bbe:	10a4      	asrs	r4, r4, #2
 8002bc0:	2500      	movs	r5, #0
 8002bc2:	42a5      	cmp	r5, r4
 8002bc4:	d105      	bne.n	8002bd2 <__libc_init_array+0x2e>
 8002bc6:	bd70      	pop	{r4, r5, r6, pc}
 8002bc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bcc:	4798      	blx	r3
 8002bce:	3501      	adds	r5, #1
 8002bd0:	e7ee      	b.n	8002bb0 <__libc_init_array+0xc>
 8002bd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bd6:	4798      	blx	r3
 8002bd8:	3501      	adds	r5, #1
 8002bda:	e7f2      	b.n	8002bc2 <__libc_init_array+0x1e>
 8002bdc:	08003abc 	.word	0x08003abc
 8002be0:	08003abc 	.word	0x08003abc
 8002be4:	08003abc 	.word	0x08003abc
 8002be8:	08003ac0 	.word	0x08003ac0

08002bec <memset>:
 8002bec:	4402      	add	r2, r0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d100      	bne.n	8002bf6 <memset+0xa>
 8002bf4:	4770      	bx	lr
 8002bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bfa:	e7f9      	b.n	8002bf0 <memset+0x4>

08002bfc <iprintf>:
 8002bfc:	b40f      	push	{r0, r1, r2, r3}
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <iprintf+0x2c>)
 8002c00:	b513      	push	{r0, r1, r4, lr}
 8002c02:	681c      	ldr	r4, [r3, #0]
 8002c04:	b124      	cbz	r4, 8002c10 <iprintf+0x14>
 8002c06:	69a3      	ldr	r3, [r4, #24]
 8002c08:	b913      	cbnz	r3, 8002c10 <iprintf+0x14>
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	f000 f84e 	bl	8002cac <__sinit>
 8002c10:	ab05      	add	r3, sp, #20
 8002c12:	9a04      	ldr	r2, [sp, #16]
 8002c14:	68a1      	ldr	r1, [r4, #8]
 8002c16:	9301      	str	r3, [sp, #4]
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f000 f955 	bl	8002ec8 <_vfiprintf_r>
 8002c1e:	b002      	add	sp, #8
 8002c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c24:	b004      	add	sp, #16
 8002c26:	4770      	bx	lr
 8002c28:	2000000c 	.word	0x2000000c

08002c2c <std>:
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	b510      	push	{r4, lr}
 8002c30:	4604      	mov	r4, r0
 8002c32:	e9c0 3300 	strd	r3, r3, [r0]
 8002c36:	6083      	str	r3, [r0, #8]
 8002c38:	8181      	strh	r1, [r0, #12]
 8002c3a:	6643      	str	r3, [r0, #100]	; 0x64
 8002c3c:	81c2      	strh	r2, [r0, #14]
 8002c3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c42:	6183      	str	r3, [r0, #24]
 8002c44:	4619      	mov	r1, r3
 8002c46:	2208      	movs	r2, #8
 8002c48:	305c      	adds	r0, #92	; 0x5c
 8002c4a:	f7ff ffcf 	bl	8002bec <memset>
 8002c4e:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <std+0x38>)
 8002c50:	6263      	str	r3, [r4, #36]	; 0x24
 8002c52:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <std+0x3c>)
 8002c54:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c56:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <std+0x40>)
 8002c58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c5a:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <std+0x44>)
 8002c5c:	6224      	str	r4, [r4, #32]
 8002c5e:	6323      	str	r3, [r4, #48]	; 0x30
 8002c60:	bd10      	pop	{r4, pc}
 8002c62:	bf00      	nop
 8002c64:	08003425 	.word	0x08003425
 8002c68:	08003447 	.word	0x08003447
 8002c6c:	0800347f 	.word	0x0800347f
 8002c70:	080034a3 	.word	0x080034a3

08002c74 <_cleanup_r>:
 8002c74:	4901      	ldr	r1, [pc, #4]	; (8002c7c <_cleanup_r+0x8>)
 8002c76:	f000 b885 	b.w	8002d84 <_fwalk_reent>
 8002c7a:	bf00      	nop
 8002c7c:	0800377d 	.word	0x0800377d

08002c80 <__sfmoreglue>:
 8002c80:	b570      	push	{r4, r5, r6, lr}
 8002c82:	1e4a      	subs	r2, r1, #1
 8002c84:	2568      	movs	r5, #104	; 0x68
 8002c86:	4355      	muls	r5, r2
 8002c88:	460e      	mov	r6, r1
 8002c8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002c8e:	f000 f897 	bl	8002dc0 <_malloc_r>
 8002c92:	4604      	mov	r4, r0
 8002c94:	b140      	cbz	r0, 8002ca8 <__sfmoreglue+0x28>
 8002c96:	2100      	movs	r1, #0
 8002c98:	e9c0 1600 	strd	r1, r6, [r0]
 8002c9c:	300c      	adds	r0, #12
 8002c9e:	60a0      	str	r0, [r4, #8]
 8002ca0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ca4:	f7ff ffa2 	bl	8002bec <memset>
 8002ca8:	4620      	mov	r0, r4
 8002caa:	bd70      	pop	{r4, r5, r6, pc}

08002cac <__sinit>:
 8002cac:	6983      	ldr	r3, [r0, #24]
 8002cae:	b510      	push	{r4, lr}
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	bb33      	cbnz	r3, 8002d02 <__sinit+0x56>
 8002cb4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002cb8:	6503      	str	r3, [r0, #80]	; 0x50
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <__sinit+0x58>)
 8002cbc:	4a12      	ldr	r2, [pc, #72]	; (8002d08 <__sinit+0x5c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6282      	str	r2, [r0, #40]	; 0x28
 8002cc2:	4298      	cmp	r0, r3
 8002cc4:	bf04      	itt	eq
 8002cc6:	2301      	moveq	r3, #1
 8002cc8:	6183      	streq	r3, [r0, #24]
 8002cca:	f000 f81f 	bl	8002d0c <__sfp>
 8002cce:	6060      	str	r0, [r4, #4]
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	f000 f81b 	bl	8002d0c <__sfp>
 8002cd6:	60a0      	str	r0, [r4, #8]
 8002cd8:	4620      	mov	r0, r4
 8002cda:	f000 f817 	bl	8002d0c <__sfp>
 8002cde:	2200      	movs	r2, #0
 8002ce0:	60e0      	str	r0, [r4, #12]
 8002ce2:	2104      	movs	r1, #4
 8002ce4:	6860      	ldr	r0, [r4, #4]
 8002ce6:	f7ff ffa1 	bl	8002c2c <std>
 8002cea:	2201      	movs	r2, #1
 8002cec:	2109      	movs	r1, #9
 8002cee:	68a0      	ldr	r0, [r4, #8]
 8002cf0:	f7ff ff9c 	bl	8002c2c <std>
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	2112      	movs	r1, #18
 8002cf8:	68e0      	ldr	r0, [r4, #12]
 8002cfa:	f7ff ff97 	bl	8002c2c <std>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	61a3      	str	r3, [r4, #24]
 8002d02:	bd10      	pop	{r4, pc}
 8002d04:	08003a24 	.word	0x08003a24
 8002d08:	08002c75 	.word	0x08002c75

08002d0c <__sfp>:
 8002d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0e:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <__sfp+0x70>)
 8002d10:	681e      	ldr	r6, [r3, #0]
 8002d12:	69b3      	ldr	r3, [r6, #24]
 8002d14:	4607      	mov	r7, r0
 8002d16:	b913      	cbnz	r3, 8002d1e <__sfp+0x12>
 8002d18:	4630      	mov	r0, r6
 8002d1a:	f7ff ffc7 	bl	8002cac <__sinit>
 8002d1e:	3648      	adds	r6, #72	; 0x48
 8002d20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	d503      	bpl.n	8002d30 <__sfp+0x24>
 8002d28:	6833      	ldr	r3, [r6, #0]
 8002d2a:	b133      	cbz	r3, 8002d3a <__sfp+0x2e>
 8002d2c:	6836      	ldr	r6, [r6, #0]
 8002d2e:	e7f7      	b.n	8002d20 <__sfp+0x14>
 8002d30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002d34:	b16d      	cbz	r5, 8002d52 <__sfp+0x46>
 8002d36:	3468      	adds	r4, #104	; 0x68
 8002d38:	e7f4      	b.n	8002d24 <__sfp+0x18>
 8002d3a:	2104      	movs	r1, #4
 8002d3c:	4638      	mov	r0, r7
 8002d3e:	f7ff ff9f 	bl	8002c80 <__sfmoreglue>
 8002d42:	6030      	str	r0, [r6, #0]
 8002d44:	2800      	cmp	r0, #0
 8002d46:	d1f1      	bne.n	8002d2c <__sfp+0x20>
 8002d48:	230c      	movs	r3, #12
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	4604      	mov	r4, r0
 8002d4e:	4620      	mov	r0, r4
 8002d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <__sfp+0x74>)
 8002d54:	6665      	str	r5, [r4, #100]	; 0x64
 8002d56:	e9c4 5500 	strd	r5, r5, [r4]
 8002d5a:	60a5      	str	r5, [r4, #8]
 8002d5c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002d60:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002d64:	2208      	movs	r2, #8
 8002d66:	4629      	mov	r1, r5
 8002d68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002d6c:	f7ff ff3e 	bl	8002bec <memset>
 8002d70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002d74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002d78:	e7e9      	b.n	8002d4e <__sfp+0x42>
 8002d7a:	bf00      	nop
 8002d7c:	08003a24 	.word	0x08003a24
 8002d80:	ffff0001 	.word	0xffff0001

08002d84 <_fwalk_reent>:
 8002d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d88:	4680      	mov	r8, r0
 8002d8a:	4689      	mov	r9, r1
 8002d8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002d90:	2600      	movs	r6, #0
 8002d92:	b914      	cbnz	r4, 8002d9a <_fwalk_reent+0x16>
 8002d94:	4630      	mov	r0, r6
 8002d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d9a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002d9e:	3f01      	subs	r7, #1
 8002da0:	d501      	bpl.n	8002da6 <_fwalk_reent+0x22>
 8002da2:	6824      	ldr	r4, [r4, #0]
 8002da4:	e7f5      	b.n	8002d92 <_fwalk_reent+0xe>
 8002da6:	89ab      	ldrh	r3, [r5, #12]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d907      	bls.n	8002dbc <_fwalk_reent+0x38>
 8002dac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002db0:	3301      	adds	r3, #1
 8002db2:	d003      	beq.n	8002dbc <_fwalk_reent+0x38>
 8002db4:	4629      	mov	r1, r5
 8002db6:	4640      	mov	r0, r8
 8002db8:	47c8      	blx	r9
 8002dba:	4306      	orrs	r6, r0
 8002dbc:	3568      	adds	r5, #104	; 0x68
 8002dbe:	e7ee      	b.n	8002d9e <_fwalk_reent+0x1a>

08002dc0 <_malloc_r>:
 8002dc0:	b570      	push	{r4, r5, r6, lr}
 8002dc2:	1ccd      	adds	r5, r1, #3
 8002dc4:	f025 0503 	bic.w	r5, r5, #3
 8002dc8:	3508      	adds	r5, #8
 8002dca:	2d0c      	cmp	r5, #12
 8002dcc:	bf38      	it	cc
 8002dce:	250c      	movcc	r5, #12
 8002dd0:	2d00      	cmp	r5, #0
 8002dd2:	4606      	mov	r6, r0
 8002dd4:	db01      	blt.n	8002dda <_malloc_r+0x1a>
 8002dd6:	42a9      	cmp	r1, r5
 8002dd8:	d903      	bls.n	8002de2 <_malloc_r+0x22>
 8002dda:	230c      	movs	r3, #12
 8002ddc:	6033      	str	r3, [r6, #0]
 8002dde:	2000      	movs	r0, #0
 8002de0:	bd70      	pop	{r4, r5, r6, pc}
 8002de2:	f000 fd6b 	bl	80038bc <__malloc_lock>
 8002de6:	4a21      	ldr	r2, [pc, #132]	; (8002e6c <_malloc_r+0xac>)
 8002de8:	6814      	ldr	r4, [r2, #0]
 8002dea:	4621      	mov	r1, r4
 8002dec:	b991      	cbnz	r1, 8002e14 <_malloc_r+0x54>
 8002dee:	4c20      	ldr	r4, [pc, #128]	; (8002e70 <_malloc_r+0xb0>)
 8002df0:	6823      	ldr	r3, [r4, #0]
 8002df2:	b91b      	cbnz	r3, 8002dfc <_malloc_r+0x3c>
 8002df4:	4630      	mov	r0, r6
 8002df6:	f000 fb05 	bl	8003404 <_sbrk_r>
 8002dfa:	6020      	str	r0, [r4, #0]
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	4630      	mov	r0, r6
 8002e00:	f000 fb00 	bl	8003404 <_sbrk_r>
 8002e04:	1c43      	adds	r3, r0, #1
 8002e06:	d124      	bne.n	8002e52 <_malloc_r+0x92>
 8002e08:	230c      	movs	r3, #12
 8002e0a:	6033      	str	r3, [r6, #0]
 8002e0c:	4630      	mov	r0, r6
 8002e0e:	f000 fd56 	bl	80038be <__malloc_unlock>
 8002e12:	e7e4      	b.n	8002dde <_malloc_r+0x1e>
 8002e14:	680b      	ldr	r3, [r1, #0]
 8002e16:	1b5b      	subs	r3, r3, r5
 8002e18:	d418      	bmi.n	8002e4c <_malloc_r+0x8c>
 8002e1a:	2b0b      	cmp	r3, #11
 8002e1c:	d90f      	bls.n	8002e3e <_malloc_r+0x7e>
 8002e1e:	600b      	str	r3, [r1, #0]
 8002e20:	50cd      	str	r5, [r1, r3]
 8002e22:	18cc      	adds	r4, r1, r3
 8002e24:	4630      	mov	r0, r6
 8002e26:	f000 fd4a 	bl	80038be <__malloc_unlock>
 8002e2a:	f104 000b 	add.w	r0, r4, #11
 8002e2e:	1d23      	adds	r3, r4, #4
 8002e30:	f020 0007 	bic.w	r0, r0, #7
 8002e34:	1ac3      	subs	r3, r0, r3
 8002e36:	d0d3      	beq.n	8002de0 <_malloc_r+0x20>
 8002e38:	425a      	negs	r2, r3
 8002e3a:	50e2      	str	r2, [r4, r3]
 8002e3c:	e7d0      	b.n	8002de0 <_malloc_r+0x20>
 8002e3e:	428c      	cmp	r4, r1
 8002e40:	684b      	ldr	r3, [r1, #4]
 8002e42:	bf16      	itet	ne
 8002e44:	6063      	strne	r3, [r4, #4]
 8002e46:	6013      	streq	r3, [r2, #0]
 8002e48:	460c      	movne	r4, r1
 8002e4a:	e7eb      	b.n	8002e24 <_malloc_r+0x64>
 8002e4c:	460c      	mov	r4, r1
 8002e4e:	6849      	ldr	r1, [r1, #4]
 8002e50:	e7cc      	b.n	8002dec <_malloc_r+0x2c>
 8002e52:	1cc4      	adds	r4, r0, #3
 8002e54:	f024 0403 	bic.w	r4, r4, #3
 8002e58:	42a0      	cmp	r0, r4
 8002e5a:	d005      	beq.n	8002e68 <_malloc_r+0xa8>
 8002e5c:	1a21      	subs	r1, r4, r0
 8002e5e:	4630      	mov	r0, r6
 8002e60:	f000 fad0 	bl	8003404 <_sbrk_r>
 8002e64:	3001      	adds	r0, #1
 8002e66:	d0cf      	beq.n	8002e08 <_malloc_r+0x48>
 8002e68:	6025      	str	r5, [r4, #0]
 8002e6a:	e7db      	b.n	8002e24 <_malloc_r+0x64>
 8002e6c:	20000090 	.word	0x20000090
 8002e70:	20000094 	.word	0x20000094

08002e74 <__sfputc_r>:
 8002e74:	6893      	ldr	r3, [r2, #8]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	b410      	push	{r4}
 8002e7c:	6093      	str	r3, [r2, #8]
 8002e7e:	da08      	bge.n	8002e92 <__sfputc_r+0x1e>
 8002e80:	6994      	ldr	r4, [r2, #24]
 8002e82:	42a3      	cmp	r3, r4
 8002e84:	db01      	blt.n	8002e8a <__sfputc_r+0x16>
 8002e86:	290a      	cmp	r1, #10
 8002e88:	d103      	bne.n	8002e92 <__sfputc_r+0x1e>
 8002e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e8e:	f000 bb0d 	b.w	80034ac <__swbuf_r>
 8002e92:	6813      	ldr	r3, [r2, #0]
 8002e94:	1c58      	adds	r0, r3, #1
 8002e96:	6010      	str	r0, [r2, #0]
 8002e98:	7019      	strb	r1, [r3, #0]
 8002e9a:	4608      	mov	r0, r1
 8002e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <__sfputs_r>:
 8002ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea4:	4606      	mov	r6, r0
 8002ea6:	460f      	mov	r7, r1
 8002ea8:	4614      	mov	r4, r2
 8002eaa:	18d5      	adds	r5, r2, r3
 8002eac:	42ac      	cmp	r4, r5
 8002eae:	d101      	bne.n	8002eb4 <__sfputs_r+0x12>
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	e007      	b.n	8002ec4 <__sfputs_r+0x22>
 8002eb4:	463a      	mov	r2, r7
 8002eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eba:	4630      	mov	r0, r6
 8002ebc:	f7ff ffda 	bl	8002e74 <__sfputc_r>
 8002ec0:	1c43      	adds	r3, r0, #1
 8002ec2:	d1f3      	bne.n	8002eac <__sfputs_r+0xa>
 8002ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ec8 <_vfiprintf_r>:
 8002ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ecc:	460c      	mov	r4, r1
 8002ece:	b09d      	sub	sp, #116	; 0x74
 8002ed0:	4617      	mov	r7, r2
 8002ed2:	461d      	mov	r5, r3
 8002ed4:	4606      	mov	r6, r0
 8002ed6:	b118      	cbz	r0, 8002ee0 <_vfiprintf_r+0x18>
 8002ed8:	6983      	ldr	r3, [r0, #24]
 8002eda:	b90b      	cbnz	r3, 8002ee0 <_vfiprintf_r+0x18>
 8002edc:	f7ff fee6 	bl	8002cac <__sinit>
 8002ee0:	4b7c      	ldr	r3, [pc, #496]	; (80030d4 <_vfiprintf_r+0x20c>)
 8002ee2:	429c      	cmp	r4, r3
 8002ee4:	d158      	bne.n	8002f98 <_vfiprintf_r+0xd0>
 8002ee6:	6874      	ldr	r4, [r6, #4]
 8002ee8:	89a3      	ldrh	r3, [r4, #12]
 8002eea:	0718      	lsls	r0, r3, #28
 8002eec:	d55e      	bpl.n	8002fac <_vfiprintf_r+0xe4>
 8002eee:	6923      	ldr	r3, [r4, #16]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d05b      	beq.n	8002fac <_vfiprintf_r+0xe4>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ef8:	2320      	movs	r3, #32
 8002efa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002efe:	2330      	movs	r3, #48	; 0x30
 8002f00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f04:	9503      	str	r5, [sp, #12]
 8002f06:	f04f 0b01 	mov.w	fp, #1
 8002f0a:	46b8      	mov	r8, r7
 8002f0c:	4645      	mov	r5, r8
 8002f0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002f12:	b10b      	cbz	r3, 8002f18 <_vfiprintf_r+0x50>
 8002f14:	2b25      	cmp	r3, #37	; 0x25
 8002f16:	d154      	bne.n	8002fc2 <_vfiprintf_r+0xfa>
 8002f18:	ebb8 0a07 	subs.w	sl, r8, r7
 8002f1c:	d00b      	beq.n	8002f36 <_vfiprintf_r+0x6e>
 8002f1e:	4653      	mov	r3, sl
 8002f20:	463a      	mov	r2, r7
 8002f22:	4621      	mov	r1, r4
 8002f24:	4630      	mov	r0, r6
 8002f26:	f7ff ffbc 	bl	8002ea2 <__sfputs_r>
 8002f2a:	3001      	adds	r0, #1
 8002f2c:	f000 80c2 	beq.w	80030b4 <_vfiprintf_r+0x1ec>
 8002f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f32:	4453      	add	r3, sl
 8002f34:	9309      	str	r3, [sp, #36]	; 0x24
 8002f36:	f898 3000 	ldrb.w	r3, [r8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 80ba 	beq.w	80030b4 <_vfiprintf_r+0x1ec>
 8002f40:	2300      	movs	r3, #0
 8002f42:	f04f 32ff 	mov.w	r2, #4294967295
 8002f46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f4a:	9304      	str	r3, [sp, #16]
 8002f4c:	9307      	str	r3, [sp, #28]
 8002f4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f52:	931a      	str	r3, [sp, #104]	; 0x68
 8002f54:	46a8      	mov	r8, r5
 8002f56:	2205      	movs	r2, #5
 8002f58:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002f5c:	485e      	ldr	r0, [pc, #376]	; (80030d8 <_vfiprintf_r+0x210>)
 8002f5e:	f7fd f93f 	bl	80001e0 <memchr>
 8002f62:	9b04      	ldr	r3, [sp, #16]
 8002f64:	bb78      	cbnz	r0, 8002fc6 <_vfiprintf_r+0xfe>
 8002f66:	06d9      	lsls	r1, r3, #27
 8002f68:	bf44      	itt	mi
 8002f6a:	2220      	movmi	r2, #32
 8002f6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f70:	071a      	lsls	r2, r3, #28
 8002f72:	bf44      	itt	mi
 8002f74:	222b      	movmi	r2, #43	; 0x2b
 8002f76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f7a:	782a      	ldrb	r2, [r5, #0]
 8002f7c:	2a2a      	cmp	r2, #42	; 0x2a
 8002f7e:	d02a      	beq.n	8002fd6 <_vfiprintf_r+0x10e>
 8002f80:	9a07      	ldr	r2, [sp, #28]
 8002f82:	46a8      	mov	r8, r5
 8002f84:	2000      	movs	r0, #0
 8002f86:	250a      	movs	r5, #10
 8002f88:	4641      	mov	r1, r8
 8002f8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f8e:	3b30      	subs	r3, #48	; 0x30
 8002f90:	2b09      	cmp	r3, #9
 8002f92:	d969      	bls.n	8003068 <_vfiprintf_r+0x1a0>
 8002f94:	b360      	cbz	r0, 8002ff0 <_vfiprintf_r+0x128>
 8002f96:	e024      	b.n	8002fe2 <_vfiprintf_r+0x11a>
 8002f98:	4b50      	ldr	r3, [pc, #320]	; (80030dc <_vfiprintf_r+0x214>)
 8002f9a:	429c      	cmp	r4, r3
 8002f9c:	d101      	bne.n	8002fa2 <_vfiprintf_r+0xda>
 8002f9e:	68b4      	ldr	r4, [r6, #8]
 8002fa0:	e7a2      	b.n	8002ee8 <_vfiprintf_r+0x20>
 8002fa2:	4b4f      	ldr	r3, [pc, #316]	; (80030e0 <_vfiprintf_r+0x218>)
 8002fa4:	429c      	cmp	r4, r3
 8002fa6:	bf08      	it	eq
 8002fa8:	68f4      	ldreq	r4, [r6, #12]
 8002faa:	e79d      	b.n	8002ee8 <_vfiprintf_r+0x20>
 8002fac:	4621      	mov	r1, r4
 8002fae:	4630      	mov	r0, r6
 8002fb0:	f000 fae0 	bl	8003574 <__swsetup_r>
 8002fb4:	2800      	cmp	r0, #0
 8002fb6:	d09d      	beq.n	8002ef4 <_vfiprintf_r+0x2c>
 8002fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fbc:	b01d      	add	sp, #116	; 0x74
 8002fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fc2:	46a8      	mov	r8, r5
 8002fc4:	e7a2      	b.n	8002f0c <_vfiprintf_r+0x44>
 8002fc6:	4a44      	ldr	r2, [pc, #272]	; (80030d8 <_vfiprintf_r+0x210>)
 8002fc8:	1a80      	subs	r0, r0, r2
 8002fca:	fa0b f000 	lsl.w	r0, fp, r0
 8002fce:	4318      	orrs	r0, r3
 8002fd0:	9004      	str	r0, [sp, #16]
 8002fd2:	4645      	mov	r5, r8
 8002fd4:	e7be      	b.n	8002f54 <_vfiprintf_r+0x8c>
 8002fd6:	9a03      	ldr	r2, [sp, #12]
 8002fd8:	1d11      	adds	r1, r2, #4
 8002fda:	6812      	ldr	r2, [r2, #0]
 8002fdc:	9103      	str	r1, [sp, #12]
 8002fde:	2a00      	cmp	r2, #0
 8002fe0:	db01      	blt.n	8002fe6 <_vfiprintf_r+0x11e>
 8002fe2:	9207      	str	r2, [sp, #28]
 8002fe4:	e004      	b.n	8002ff0 <_vfiprintf_r+0x128>
 8002fe6:	4252      	negs	r2, r2
 8002fe8:	f043 0302 	orr.w	r3, r3, #2
 8002fec:	9207      	str	r2, [sp, #28]
 8002fee:	9304      	str	r3, [sp, #16]
 8002ff0:	f898 3000 	ldrb.w	r3, [r8]
 8002ff4:	2b2e      	cmp	r3, #46	; 0x2e
 8002ff6:	d10e      	bne.n	8003016 <_vfiprintf_r+0x14e>
 8002ff8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8002ffe:	d138      	bne.n	8003072 <_vfiprintf_r+0x1aa>
 8003000:	9b03      	ldr	r3, [sp, #12]
 8003002:	1d1a      	adds	r2, r3, #4
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	9203      	str	r2, [sp, #12]
 8003008:	2b00      	cmp	r3, #0
 800300a:	bfb8      	it	lt
 800300c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003010:	f108 0802 	add.w	r8, r8, #2
 8003014:	9305      	str	r3, [sp, #20]
 8003016:	4d33      	ldr	r5, [pc, #204]	; (80030e4 <_vfiprintf_r+0x21c>)
 8003018:	f898 1000 	ldrb.w	r1, [r8]
 800301c:	2203      	movs	r2, #3
 800301e:	4628      	mov	r0, r5
 8003020:	f7fd f8de 	bl	80001e0 <memchr>
 8003024:	b140      	cbz	r0, 8003038 <_vfiprintf_r+0x170>
 8003026:	2340      	movs	r3, #64	; 0x40
 8003028:	1b40      	subs	r0, r0, r5
 800302a:	fa03 f000 	lsl.w	r0, r3, r0
 800302e:	9b04      	ldr	r3, [sp, #16]
 8003030:	4303      	orrs	r3, r0
 8003032:	f108 0801 	add.w	r8, r8, #1
 8003036:	9304      	str	r3, [sp, #16]
 8003038:	f898 1000 	ldrb.w	r1, [r8]
 800303c:	482a      	ldr	r0, [pc, #168]	; (80030e8 <_vfiprintf_r+0x220>)
 800303e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003042:	2206      	movs	r2, #6
 8003044:	f108 0701 	add.w	r7, r8, #1
 8003048:	f7fd f8ca 	bl	80001e0 <memchr>
 800304c:	2800      	cmp	r0, #0
 800304e:	d037      	beq.n	80030c0 <_vfiprintf_r+0x1f8>
 8003050:	4b26      	ldr	r3, [pc, #152]	; (80030ec <_vfiprintf_r+0x224>)
 8003052:	bb1b      	cbnz	r3, 800309c <_vfiprintf_r+0x1d4>
 8003054:	9b03      	ldr	r3, [sp, #12]
 8003056:	3307      	adds	r3, #7
 8003058:	f023 0307 	bic.w	r3, r3, #7
 800305c:	3308      	adds	r3, #8
 800305e:	9303      	str	r3, [sp, #12]
 8003060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003062:	444b      	add	r3, r9
 8003064:	9309      	str	r3, [sp, #36]	; 0x24
 8003066:	e750      	b.n	8002f0a <_vfiprintf_r+0x42>
 8003068:	fb05 3202 	mla	r2, r5, r2, r3
 800306c:	2001      	movs	r0, #1
 800306e:	4688      	mov	r8, r1
 8003070:	e78a      	b.n	8002f88 <_vfiprintf_r+0xc0>
 8003072:	2300      	movs	r3, #0
 8003074:	f108 0801 	add.w	r8, r8, #1
 8003078:	9305      	str	r3, [sp, #20]
 800307a:	4619      	mov	r1, r3
 800307c:	250a      	movs	r5, #10
 800307e:	4640      	mov	r0, r8
 8003080:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003084:	3a30      	subs	r2, #48	; 0x30
 8003086:	2a09      	cmp	r2, #9
 8003088:	d903      	bls.n	8003092 <_vfiprintf_r+0x1ca>
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0c3      	beq.n	8003016 <_vfiprintf_r+0x14e>
 800308e:	9105      	str	r1, [sp, #20]
 8003090:	e7c1      	b.n	8003016 <_vfiprintf_r+0x14e>
 8003092:	fb05 2101 	mla	r1, r5, r1, r2
 8003096:	2301      	movs	r3, #1
 8003098:	4680      	mov	r8, r0
 800309a:	e7f0      	b.n	800307e <_vfiprintf_r+0x1b6>
 800309c:	ab03      	add	r3, sp, #12
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	4622      	mov	r2, r4
 80030a2:	4b13      	ldr	r3, [pc, #76]	; (80030f0 <_vfiprintf_r+0x228>)
 80030a4:	a904      	add	r1, sp, #16
 80030a6:	4630      	mov	r0, r6
 80030a8:	f3af 8000 	nop.w
 80030ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80030b0:	4681      	mov	r9, r0
 80030b2:	d1d5      	bne.n	8003060 <_vfiprintf_r+0x198>
 80030b4:	89a3      	ldrh	r3, [r4, #12]
 80030b6:	065b      	lsls	r3, r3, #25
 80030b8:	f53f af7e 	bmi.w	8002fb8 <_vfiprintf_r+0xf0>
 80030bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030be:	e77d      	b.n	8002fbc <_vfiprintf_r+0xf4>
 80030c0:	ab03      	add	r3, sp, #12
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	4622      	mov	r2, r4
 80030c6:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <_vfiprintf_r+0x228>)
 80030c8:	a904      	add	r1, sp, #16
 80030ca:	4630      	mov	r0, r6
 80030cc:	f000 f888 	bl	80031e0 <_printf_i>
 80030d0:	e7ec      	b.n	80030ac <_vfiprintf_r+0x1e4>
 80030d2:	bf00      	nop
 80030d4:	08003a48 	.word	0x08003a48
 80030d8:	08003a88 	.word	0x08003a88
 80030dc:	08003a68 	.word	0x08003a68
 80030e0:	08003a28 	.word	0x08003a28
 80030e4:	08003a8e 	.word	0x08003a8e
 80030e8:	08003a92 	.word	0x08003a92
 80030ec:	00000000 	.word	0x00000000
 80030f0:	08002ea3 	.word	0x08002ea3

080030f4 <_printf_common>:
 80030f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030f8:	4691      	mov	r9, r2
 80030fa:	461f      	mov	r7, r3
 80030fc:	688a      	ldr	r2, [r1, #8]
 80030fe:	690b      	ldr	r3, [r1, #16]
 8003100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003104:	4293      	cmp	r3, r2
 8003106:	bfb8      	it	lt
 8003108:	4613      	movlt	r3, r2
 800310a:	f8c9 3000 	str.w	r3, [r9]
 800310e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003112:	4606      	mov	r6, r0
 8003114:	460c      	mov	r4, r1
 8003116:	b112      	cbz	r2, 800311e <_printf_common+0x2a>
 8003118:	3301      	adds	r3, #1
 800311a:	f8c9 3000 	str.w	r3, [r9]
 800311e:	6823      	ldr	r3, [r4, #0]
 8003120:	0699      	lsls	r1, r3, #26
 8003122:	bf42      	ittt	mi
 8003124:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003128:	3302      	addmi	r3, #2
 800312a:	f8c9 3000 	strmi.w	r3, [r9]
 800312e:	6825      	ldr	r5, [r4, #0]
 8003130:	f015 0506 	ands.w	r5, r5, #6
 8003134:	d107      	bne.n	8003146 <_printf_common+0x52>
 8003136:	f104 0a19 	add.w	sl, r4, #25
 800313a:	68e3      	ldr	r3, [r4, #12]
 800313c:	f8d9 2000 	ldr.w	r2, [r9]
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	42ab      	cmp	r3, r5
 8003144:	dc28      	bgt.n	8003198 <_printf_common+0xa4>
 8003146:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800314a:	6822      	ldr	r2, [r4, #0]
 800314c:	3300      	adds	r3, #0
 800314e:	bf18      	it	ne
 8003150:	2301      	movne	r3, #1
 8003152:	0692      	lsls	r2, r2, #26
 8003154:	d42d      	bmi.n	80031b2 <_printf_common+0xbe>
 8003156:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800315a:	4639      	mov	r1, r7
 800315c:	4630      	mov	r0, r6
 800315e:	47c0      	blx	r8
 8003160:	3001      	adds	r0, #1
 8003162:	d020      	beq.n	80031a6 <_printf_common+0xb2>
 8003164:	6823      	ldr	r3, [r4, #0]
 8003166:	68e5      	ldr	r5, [r4, #12]
 8003168:	f8d9 2000 	ldr.w	r2, [r9]
 800316c:	f003 0306 	and.w	r3, r3, #6
 8003170:	2b04      	cmp	r3, #4
 8003172:	bf08      	it	eq
 8003174:	1aad      	subeq	r5, r5, r2
 8003176:	68a3      	ldr	r3, [r4, #8]
 8003178:	6922      	ldr	r2, [r4, #16]
 800317a:	bf0c      	ite	eq
 800317c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003180:	2500      	movne	r5, #0
 8003182:	4293      	cmp	r3, r2
 8003184:	bfc4      	itt	gt
 8003186:	1a9b      	subgt	r3, r3, r2
 8003188:	18ed      	addgt	r5, r5, r3
 800318a:	f04f 0900 	mov.w	r9, #0
 800318e:	341a      	adds	r4, #26
 8003190:	454d      	cmp	r5, r9
 8003192:	d11a      	bne.n	80031ca <_printf_common+0xd6>
 8003194:	2000      	movs	r0, #0
 8003196:	e008      	b.n	80031aa <_printf_common+0xb6>
 8003198:	2301      	movs	r3, #1
 800319a:	4652      	mov	r2, sl
 800319c:	4639      	mov	r1, r7
 800319e:	4630      	mov	r0, r6
 80031a0:	47c0      	blx	r8
 80031a2:	3001      	adds	r0, #1
 80031a4:	d103      	bne.n	80031ae <_printf_common+0xba>
 80031a6:	f04f 30ff 	mov.w	r0, #4294967295
 80031aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031ae:	3501      	adds	r5, #1
 80031b0:	e7c3      	b.n	800313a <_printf_common+0x46>
 80031b2:	18e1      	adds	r1, r4, r3
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	2030      	movs	r0, #48	; 0x30
 80031b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031bc:	4422      	add	r2, r4
 80031be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031c6:	3302      	adds	r3, #2
 80031c8:	e7c5      	b.n	8003156 <_printf_common+0x62>
 80031ca:	2301      	movs	r3, #1
 80031cc:	4622      	mov	r2, r4
 80031ce:	4639      	mov	r1, r7
 80031d0:	4630      	mov	r0, r6
 80031d2:	47c0      	blx	r8
 80031d4:	3001      	adds	r0, #1
 80031d6:	d0e6      	beq.n	80031a6 <_printf_common+0xb2>
 80031d8:	f109 0901 	add.w	r9, r9, #1
 80031dc:	e7d8      	b.n	8003190 <_printf_common+0x9c>
	...

080031e0 <_printf_i>:
 80031e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80031e8:	460c      	mov	r4, r1
 80031ea:	7e09      	ldrb	r1, [r1, #24]
 80031ec:	b085      	sub	sp, #20
 80031ee:	296e      	cmp	r1, #110	; 0x6e
 80031f0:	4617      	mov	r7, r2
 80031f2:	4606      	mov	r6, r0
 80031f4:	4698      	mov	r8, r3
 80031f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80031f8:	f000 80b3 	beq.w	8003362 <_printf_i+0x182>
 80031fc:	d822      	bhi.n	8003244 <_printf_i+0x64>
 80031fe:	2963      	cmp	r1, #99	; 0x63
 8003200:	d036      	beq.n	8003270 <_printf_i+0x90>
 8003202:	d80a      	bhi.n	800321a <_printf_i+0x3a>
 8003204:	2900      	cmp	r1, #0
 8003206:	f000 80b9 	beq.w	800337c <_printf_i+0x19c>
 800320a:	2958      	cmp	r1, #88	; 0x58
 800320c:	f000 8083 	beq.w	8003316 <_printf_i+0x136>
 8003210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003214:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003218:	e032      	b.n	8003280 <_printf_i+0xa0>
 800321a:	2964      	cmp	r1, #100	; 0x64
 800321c:	d001      	beq.n	8003222 <_printf_i+0x42>
 800321e:	2969      	cmp	r1, #105	; 0x69
 8003220:	d1f6      	bne.n	8003210 <_printf_i+0x30>
 8003222:	6820      	ldr	r0, [r4, #0]
 8003224:	6813      	ldr	r3, [r2, #0]
 8003226:	0605      	lsls	r5, r0, #24
 8003228:	f103 0104 	add.w	r1, r3, #4
 800322c:	d52a      	bpl.n	8003284 <_printf_i+0xa4>
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6011      	str	r1, [r2, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	da03      	bge.n	800323e <_printf_i+0x5e>
 8003236:	222d      	movs	r2, #45	; 0x2d
 8003238:	425b      	negs	r3, r3
 800323a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800323e:	486f      	ldr	r0, [pc, #444]	; (80033fc <_printf_i+0x21c>)
 8003240:	220a      	movs	r2, #10
 8003242:	e039      	b.n	80032b8 <_printf_i+0xd8>
 8003244:	2973      	cmp	r1, #115	; 0x73
 8003246:	f000 809d 	beq.w	8003384 <_printf_i+0x1a4>
 800324a:	d808      	bhi.n	800325e <_printf_i+0x7e>
 800324c:	296f      	cmp	r1, #111	; 0x6f
 800324e:	d020      	beq.n	8003292 <_printf_i+0xb2>
 8003250:	2970      	cmp	r1, #112	; 0x70
 8003252:	d1dd      	bne.n	8003210 <_printf_i+0x30>
 8003254:	6823      	ldr	r3, [r4, #0]
 8003256:	f043 0320 	orr.w	r3, r3, #32
 800325a:	6023      	str	r3, [r4, #0]
 800325c:	e003      	b.n	8003266 <_printf_i+0x86>
 800325e:	2975      	cmp	r1, #117	; 0x75
 8003260:	d017      	beq.n	8003292 <_printf_i+0xb2>
 8003262:	2978      	cmp	r1, #120	; 0x78
 8003264:	d1d4      	bne.n	8003210 <_printf_i+0x30>
 8003266:	2378      	movs	r3, #120	; 0x78
 8003268:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800326c:	4864      	ldr	r0, [pc, #400]	; (8003400 <_printf_i+0x220>)
 800326e:	e055      	b.n	800331c <_printf_i+0x13c>
 8003270:	6813      	ldr	r3, [r2, #0]
 8003272:	1d19      	adds	r1, r3, #4
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6011      	str	r1, [r2, #0]
 8003278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800327c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003280:	2301      	movs	r3, #1
 8003282:	e08c      	b.n	800339e <_printf_i+0x1be>
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6011      	str	r1, [r2, #0]
 8003288:	f010 0f40 	tst.w	r0, #64	; 0x40
 800328c:	bf18      	it	ne
 800328e:	b21b      	sxthne	r3, r3
 8003290:	e7cf      	b.n	8003232 <_printf_i+0x52>
 8003292:	6813      	ldr	r3, [r2, #0]
 8003294:	6825      	ldr	r5, [r4, #0]
 8003296:	1d18      	adds	r0, r3, #4
 8003298:	6010      	str	r0, [r2, #0]
 800329a:	0628      	lsls	r0, r5, #24
 800329c:	d501      	bpl.n	80032a2 <_printf_i+0xc2>
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	e002      	b.n	80032a8 <_printf_i+0xc8>
 80032a2:	0668      	lsls	r0, r5, #25
 80032a4:	d5fb      	bpl.n	800329e <_printf_i+0xbe>
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	4854      	ldr	r0, [pc, #336]	; (80033fc <_printf_i+0x21c>)
 80032aa:	296f      	cmp	r1, #111	; 0x6f
 80032ac:	bf14      	ite	ne
 80032ae:	220a      	movne	r2, #10
 80032b0:	2208      	moveq	r2, #8
 80032b2:	2100      	movs	r1, #0
 80032b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032b8:	6865      	ldr	r5, [r4, #4]
 80032ba:	60a5      	str	r5, [r4, #8]
 80032bc:	2d00      	cmp	r5, #0
 80032be:	f2c0 8095 	blt.w	80033ec <_printf_i+0x20c>
 80032c2:	6821      	ldr	r1, [r4, #0]
 80032c4:	f021 0104 	bic.w	r1, r1, #4
 80032c8:	6021      	str	r1, [r4, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d13d      	bne.n	800334a <_printf_i+0x16a>
 80032ce:	2d00      	cmp	r5, #0
 80032d0:	f040 808e 	bne.w	80033f0 <_printf_i+0x210>
 80032d4:	4665      	mov	r5, ip
 80032d6:	2a08      	cmp	r2, #8
 80032d8:	d10b      	bne.n	80032f2 <_printf_i+0x112>
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	07db      	lsls	r3, r3, #31
 80032de:	d508      	bpl.n	80032f2 <_printf_i+0x112>
 80032e0:	6923      	ldr	r3, [r4, #16]
 80032e2:	6862      	ldr	r2, [r4, #4]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	bfde      	ittt	le
 80032e8:	2330      	movle	r3, #48	; 0x30
 80032ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80032f2:	ebac 0305 	sub.w	r3, ip, r5
 80032f6:	6123      	str	r3, [r4, #16]
 80032f8:	f8cd 8000 	str.w	r8, [sp]
 80032fc:	463b      	mov	r3, r7
 80032fe:	aa03      	add	r2, sp, #12
 8003300:	4621      	mov	r1, r4
 8003302:	4630      	mov	r0, r6
 8003304:	f7ff fef6 	bl	80030f4 <_printf_common>
 8003308:	3001      	adds	r0, #1
 800330a:	d14d      	bne.n	80033a8 <_printf_i+0x1c8>
 800330c:	f04f 30ff 	mov.w	r0, #4294967295
 8003310:	b005      	add	sp, #20
 8003312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003316:	4839      	ldr	r0, [pc, #228]	; (80033fc <_printf_i+0x21c>)
 8003318:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800331c:	6813      	ldr	r3, [r2, #0]
 800331e:	6821      	ldr	r1, [r4, #0]
 8003320:	1d1d      	adds	r5, r3, #4
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6015      	str	r5, [r2, #0]
 8003326:	060a      	lsls	r2, r1, #24
 8003328:	d50b      	bpl.n	8003342 <_printf_i+0x162>
 800332a:	07ca      	lsls	r2, r1, #31
 800332c:	bf44      	itt	mi
 800332e:	f041 0120 	orrmi.w	r1, r1, #32
 8003332:	6021      	strmi	r1, [r4, #0]
 8003334:	b91b      	cbnz	r3, 800333e <_printf_i+0x15e>
 8003336:	6822      	ldr	r2, [r4, #0]
 8003338:	f022 0220 	bic.w	r2, r2, #32
 800333c:	6022      	str	r2, [r4, #0]
 800333e:	2210      	movs	r2, #16
 8003340:	e7b7      	b.n	80032b2 <_printf_i+0xd2>
 8003342:	064d      	lsls	r5, r1, #25
 8003344:	bf48      	it	mi
 8003346:	b29b      	uxthmi	r3, r3
 8003348:	e7ef      	b.n	800332a <_printf_i+0x14a>
 800334a:	4665      	mov	r5, ip
 800334c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003350:	fb02 3311 	mls	r3, r2, r1, r3
 8003354:	5cc3      	ldrb	r3, [r0, r3]
 8003356:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800335a:	460b      	mov	r3, r1
 800335c:	2900      	cmp	r1, #0
 800335e:	d1f5      	bne.n	800334c <_printf_i+0x16c>
 8003360:	e7b9      	b.n	80032d6 <_printf_i+0xf6>
 8003362:	6813      	ldr	r3, [r2, #0]
 8003364:	6825      	ldr	r5, [r4, #0]
 8003366:	6961      	ldr	r1, [r4, #20]
 8003368:	1d18      	adds	r0, r3, #4
 800336a:	6010      	str	r0, [r2, #0]
 800336c:	0628      	lsls	r0, r5, #24
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	d501      	bpl.n	8003376 <_printf_i+0x196>
 8003372:	6019      	str	r1, [r3, #0]
 8003374:	e002      	b.n	800337c <_printf_i+0x19c>
 8003376:	066a      	lsls	r2, r5, #25
 8003378:	d5fb      	bpl.n	8003372 <_printf_i+0x192>
 800337a:	8019      	strh	r1, [r3, #0]
 800337c:	2300      	movs	r3, #0
 800337e:	6123      	str	r3, [r4, #16]
 8003380:	4665      	mov	r5, ip
 8003382:	e7b9      	b.n	80032f8 <_printf_i+0x118>
 8003384:	6813      	ldr	r3, [r2, #0]
 8003386:	1d19      	adds	r1, r3, #4
 8003388:	6011      	str	r1, [r2, #0]
 800338a:	681d      	ldr	r5, [r3, #0]
 800338c:	6862      	ldr	r2, [r4, #4]
 800338e:	2100      	movs	r1, #0
 8003390:	4628      	mov	r0, r5
 8003392:	f7fc ff25 	bl	80001e0 <memchr>
 8003396:	b108      	cbz	r0, 800339c <_printf_i+0x1bc>
 8003398:	1b40      	subs	r0, r0, r5
 800339a:	6060      	str	r0, [r4, #4]
 800339c:	6863      	ldr	r3, [r4, #4]
 800339e:	6123      	str	r3, [r4, #16]
 80033a0:	2300      	movs	r3, #0
 80033a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033a6:	e7a7      	b.n	80032f8 <_printf_i+0x118>
 80033a8:	6923      	ldr	r3, [r4, #16]
 80033aa:	462a      	mov	r2, r5
 80033ac:	4639      	mov	r1, r7
 80033ae:	4630      	mov	r0, r6
 80033b0:	47c0      	blx	r8
 80033b2:	3001      	adds	r0, #1
 80033b4:	d0aa      	beq.n	800330c <_printf_i+0x12c>
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	079b      	lsls	r3, r3, #30
 80033ba:	d413      	bmi.n	80033e4 <_printf_i+0x204>
 80033bc:	68e0      	ldr	r0, [r4, #12]
 80033be:	9b03      	ldr	r3, [sp, #12]
 80033c0:	4298      	cmp	r0, r3
 80033c2:	bfb8      	it	lt
 80033c4:	4618      	movlt	r0, r3
 80033c6:	e7a3      	b.n	8003310 <_printf_i+0x130>
 80033c8:	2301      	movs	r3, #1
 80033ca:	464a      	mov	r2, r9
 80033cc:	4639      	mov	r1, r7
 80033ce:	4630      	mov	r0, r6
 80033d0:	47c0      	blx	r8
 80033d2:	3001      	adds	r0, #1
 80033d4:	d09a      	beq.n	800330c <_printf_i+0x12c>
 80033d6:	3501      	adds	r5, #1
 80033d8:	68e3      	ldr	r3, [r4, #12]
 80033da:	9a03      	ldr	r2, [sp, #12]
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	42ab      	cmp	r3, r5
 80033e0:	dcf2      	bgt.n	80033c8 <_printf_i+0x1e8>
 80033e2:	e7eb      	b.n	80033bc <_printf_i+0x1dc>
 80033e4:	2500      	movs	r5, #0
 80033e6:	f104 0919 	add.w	r9, r4, #25
 80033ea:	e7f5      	b.n	80033d8 <_printf_i+0x1f8>
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1ac      	bne.n	800334a <_printf_i+0x16a>
 80033f0:	7803      	ldrb	r3, [r0, #0]
 80033f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033fa:	e76c      	b.n	80032d6 <_printf_i+0xf6>
 80033fc:	08003a99 	.word	0x08003a99
 8003400:	08003aaa 	.word	0x08003aaa

08003404 <_sbrk_r>:
 8003404:	b538      	push	{r3, r4, r5, lr}
 8003406:	4c06      	ldr	r4, [pc, #24]	; (8003420 <_sbrk_r+0x1c>)
 8003408:	2300      	movs	r3, #0
 800340a:	4605      	mov	r5, r0
 800340c:	4608      	mov	r0, r1
 800340e:	6023      	str	r3, [r4, #0]
 8003410:	f7fd f96e 	bl	80006f0 <_sbrk>
 8003414:	1c43      	adds	r3, r0, #1
 8003416:	d102      	bne.n	800341e <_sbrk_r+0x1a>
 8003418:	6823      	ldr	r3, [r4, #0]
 800341a:	b103      	cbz	r3, 800341e <_sbrk_r+0x1a>
 800341c:	602b      	str	r3, [r5, #0]
 800341e:	bd38      	pop	{r3, r4, r5, pc}
 8003420:	20000120 	.word	0x20000120

08003424 <__sread>:
 8003424:	b510      	push	{r4, lr}
 8003426:	460c      	mov	r4, r1
 8003428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800342c:	f000 fa96 	bl	800395c <_read_r>
 8003430:	2800      	cmp	r0, #0
 8003432:	bfab      	itete	ge
 8003434:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003436:	89a3      	ldrhlt	r3, [r4, #12]
 8003438:	181b      	addge	r3, r3, r0
 800343a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800343e:	bfac      	ite	ge
 8003440:	6563      	strge	r3, [r4, #84]	; 0x54
 8003442:	81a3      	strhlt	r3, [r4, #12]
 8003444:	bd10      	pop	{r4, pc}

08003446 <__swrite>:
 8003446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800344a:	461f      	mov	r7, r3
 800344c:	898b      	ldrh	r3, [r1, #12]
 800344e:	05db      	lsls	r3, r3, #23
 8003450:	4605      	mov	r5, r0
 8003452:	460c      	mov	r4, r1
 8003454:	4616      	mov	r6, r2
 8003456:	d505      	bpl.n	8003464 <__swrite+0x1e>
 8003458:	2302      	movs	r3, #2
 800345a:	2200      	movs	r2, #0
 800345c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003460:	f000 f9b6 	bl	80037d0 <_lseek_r>
 8003464:	89a3      	ldrh	r3, [r4, #12]
 8003466:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800346a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800346e:	81a3      	strh	r3, [r4, #12]
 8003470:	4632      	mov	r2, r6
 8003472:	463b      	mov	r3, r7
 8003474:	4628      	mov	r0, r5
 8003476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800347a:	f000 b869 	b.w	8003550 <_write_r>

0800347e <__sseek>:
 800347e:	b510      	push	{r4, lr}
 8003480:	460c      	mov	r4, r1
 8003482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003486:	f000 f9a3 	bl	80037d0 <_lseek_r>
 800348a:	1c43      	adds	r3, r0, #1
 800348c:	89a3      	ldrh	r3, [r4, #12]
 800348e:	bf15      	itete	ne
 8003490:	6560      	strne	r0, [r4, #84]	; 0x54
 8003492:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003496:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800349a:	81a3      	strheq	r3, [r4, #12]
 800349c:	bf18      	it	ne
 800349e:	81a3      	strhne	r3, [r4, #12]
 80034a0:	bd10      	pop	{r4, pc}

080034a2 <__sclose>:
 80034a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034a6:	f000 b8d3 	b.w	8003650 <_close_r>
	...

080034ac <__swbuf_r>:
 80034ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ae:	460e      	mov	r6, r1
 80034b0:	4614      	mov	r4, r2
 80034b2:	4605      	mov	r5, r0
 80034b4:	b118      	cbz	r0, 80034be <__swbuf_r+0x12>
 80034b6:	6983      	ldr	r3, [r0, #24]
 80034b8:	b90b      	cbnz	r3, 80034be <__swbuf_r+0x12>
 80034ba:	f7ff fbf7 	bl	8002cac <__sinit>
 80034be:	4b21      	ldr	r3, [pc, #132]	; (8003544 <__swbuf_r+0x98>)
 80034c0:	429c      	cmp	r4, r3
 80034c2:	d12a      	bne.n	800351a <__swbuf_r+0x6e>
 80034c4:	686c      	ldr	r4, [r5, #4]
 80034c6:	69a3      	ldr	r3, [r4, #24]
 80034c8:	60a3      	str	r3, [r4, #8]
 80034ca:	89a3      	ldrh	r3, [r4, #12]
 80034cc:	071a      	lsls	r2, r3, #28
 80034ce:	d52e      	bpl.n	800352e <__swbuf_r+0x82>
 80034d0:	6923      	ldr	r3, [r4, #16]
 80034d2:	b363      	cbz	r3, 800352e <__swbuf_r+0x82>
 80034d4:	6923      	ldr	r3, [r4, #16]
 80034d6:	6820      	ldr	r0, [r4, #0]
 80034d8:	1ac0      	subs	r0, r0, r3
 80034da:	6963      	ldr	r3, [r4, #20]
 80034dc:	b2f6      	uxtb	r6, r6
 80034de:	4283      	cmp	r3, r0
 80034e0:	4637      	mov	r7, r6
 80034e2:	dc04      	bgt.n	80034ee <__swbuf_r+0x42>
 80034e4:	4621      	mov	r1, r4
 80034e6:	4628      	mov	r0, r5
 80034e8:	f000 f948 	bl	800377c <_fflush_r>
 80034ec:	bb28      	cbnz	r0, 800353a <__swbuf_r+0x8e>
 80034ee:	68a3      	ldr	r3, [r4, #8]
 80034f0:	3b01      	subs	r3, #1
 80034f2:	60a3      	str	r3, [r4, #8]
 80034f4:	6823      	ldr	r3, [r4, #0]
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	6022      	str	r2, [r4, #0]
 80034fa:	701e      	strb	r6, [r3, #0]
 80034fc:	6963      	ldr	r3, [r4, #20]
 80034fe:	3001      	adds	r0, #1
 8003500:	4283      	cmp	r3, r0
 8003502:	d004      	beq.n	800350e <__swbuf_r+0x62>
 8003504:	89a3      	ldrh	r3, [r4, #12]
 8003506:	07db      	lsls	r3, r3, #31
 8003508:	d519      	bpl.n	800353e <__swbuf_r+0x92>
 800350a:	2e0a      	cmp	r6, #10
 800350c:	d117      	bne.n	800353e <__swbuf_r+0x92>
 800350e:	4621      	mov	r1, r4
 8003510:	4628      	mov	r0, r5
 8003512:	f000 f933 	bl	800377c <_fflush_r>
 8003516:	b190      	cbz	r0, 800353e <__swbuf_r+0x92>
 8003518:	e00f      	b.n	800353a <__swbuf_r+0x8e>
 800351a:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <__swbuf_r+0x9c>)
 800351c:	429c      	cmp	r4, r3
 800351e:	d101      	bne.n	8003524 <__swbuf_r+0x78>
 8003520:	68ac      	ldr	r4, [r5, #8]
 8003522:	e7d0      	b.n	80034c6 <__swbuf_r+0x1a>
 8003524:	4b09      	ldr	r3, [pc, #36]	; (800354c <__swbuf_r+0xa0>)
 8003526:	429c      	cmp	r4, r3
 8003528:	bf08      	it	eq
 800352a:	68ec      	ldreq	r4, [r5, #12]
 800352c:	e7cb      	b.n	80034c6 <__swbuf_r+0x1a>
 800352e:	4621      	mov	r1, r4
 8003530:	4628      	mov	r0, r5
 8003532:	f000 f81f 	bl	8003574 <__swsetup_r>
 8003536:	2800      	cmp	r0, #0
 8003538:	d0cc      	beq.n	80034d4 <__swbuf_r+0x28>
 800353a:	f04f 37ff 	mov.w	r7, #4294967295
 800353e:	4638      	mov	r0, r7
 8003540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003542:	bf00      	nop
 8003544:	08003a48 	.word	0x08003a48
 8003548:	08003a68 	.word	0x08003a68
 800354c:	08003a28 	.word	0x08003a28

08003550 <_write_r>:
 8003550:	b538      	push	{r3, r4, r5, lr}
 8003552:	4c07      	ldr	r4, [pc, #28]	; (8003570 <_write_r+0x20>)
 8003554:	4605      	mov	r5, r0
 8003556:	4608      	mov	r0, r1
 8003558:	4611      	mov	r1, r2
 800355a:	2200      	movs	r2, #0
 800355c:	6022      	str	r2, [r4, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	f7fd f875 	bl	800064e <_write>
 8003564:	1c43      	adds	r3, r0, #1
 8003566:	d102      	bne.n	800356e <_write_r+0x1e>
 8003568:	6823      	ldr	r3, [r4, #0]
 800356a:	b103      	cbz	r3, 800356e <_write_r+0x1e>
 800356c:	602b      	str	r3, [r5, #0]
 800356e:	bd38      	pop	{r3, r4, r5, pc}
 8003570:	20000120 	.word	0x20000120

08003574 <__swsetup_r>:
 8003574:	4b32      	ldr	r3, [pc, #200]	; (8003640 <__swsetup_r+0xcc>)
 8003576:	b570      	push	{r4, r5, r6, lr}
 8003578:	681d      	ldr	r5, [r3, #0]
 800357a:	4606      	mov	r6, r0
 800357c:	460c      	mov	r4, r1
 800357e:	b125      	cbz	r5, 800358a <__swsetup_r+0x16>
 8003580:	69ab      	ldr	r3, [r5, #24]
 8003582:	b913      	cbnz	r3, 800358a <__swsetup_r+0x16>
 8003584:	4628      	mov	r0, r5
 8003586:	f7ff fb91 	bl	8002cac <__sinit>
 800358a:	4b2e      	ldr	r3, [pc, #184]	; (8003644 <__swsetup_r+0xd0>)
 800358c:	429c      	cmp	r4, r3
 800358e:	d10f      	bne.n	80035b0 <__swsetup_r+0x3c>
 8003590:	686c      	ldr	r4, [r5, #4]
 8003592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003596:	b29a      	uxth	r2, r3
 8003598:	0715      	lsls	r5, r2, #28
 800359a:	d42c      	bmi.n	80035f6 <__swsetup_r+0x82>
 800359c:	06d0      	lsls	r0, r2, #27
 800359e:	d411      	bmi.n	80035c4 <__swsetup_r+0x50>
 80035a0:	2209      	movs	r2, #9
 80035a2:	6032      	str	r2, [r6, #0]
 80035a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035a8:	81a3      	strh	r3, [r4, #12]
 80035aa:	f04f 30ff 	mov.w	r0, #4294967295
 80035ae:	e03e      	b.n	800362e <__swsetup_r+0xba>
 80035b0:	4b25      	ldr	r3, [pc, #148]	; (8003648 <__swsetup_r+0xd4>)
 80035b2:	429c      	cmp	r4, r3
 80035b4:	d101      	bne.n	80035ba <__swsetup_r+0x46>
 80035b6:	68ac      	ldr	r4, [r5, #8]
 80035b8:	e7eb      	b.n	8003592 <__swsetup_r+0x1e>
 80035ba:	4b24      	ldr	r3, [pc, #144]	; (800364c <__swsetup_r+0xd8>)
 80035bc:	429c      	cmp	r4, r3
 80035be:	bf08      	it	eq
 80035c0:	68ec      	ldreq	r4, [r5, #12]
 80035c2:	e7e6      	b.n	8003592 <__swsetup_r+0x1e>
 80035c4:	0751      	lsls	r1, r2, #29
 80035c6:	d512      	bpl.n	80035ee <__swsetup_r+0x7a>
 80035c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035ca:	b141      	cbz	r1, 80035de <__swsetup_r+0x6a>
 80035cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035d0:	4299      	cmp	r1, r3
 80035d2:	d002      	beq.n	80035da <__swsetup_r+0x66>
 80035d4:	4630      	mov	r0, r6
 80035d6:	f000 f973 	bl	80038c0 <_free_r>
 80035da:	2300      	movs	r3, #0
 80035dc:	6363      	str	r3, [r4, #52]	; 0x34
 80035de:	89a3      	ldrh	r3, [r4, #12]
 80035e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80035e4:	81a3      	strh	r3, [r4, #12]
 80035e6:	2300      	movs	r3, #0
 80035e8:	6063      	str	r3, [r4, #4]
 80035ea:	6923      	ldr	r3, [r4, #16]
 80035ec:	6023      	str	r3, [r4, #0]
 80035ee:	89a3      	ldrh	r3, [r4, #12]
 80035f0:	f043 0308 	orr.w	r3, r3, #8
 80035f4:	81a3      	strh	r3, [r4, #12]
 80035f6:	6923      	ldr	r3, [r4, #16]
 80035f8:	b94b      	cbnz	r3, 800360e <__swsetup_r+0x9a>
 80035fa:	89a3      	ldrh	r3, [r4, #12]
 80035fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003604:	d003      	beq.n	800360e <__swsetup_r+0x9a>
 8003606:	4621      	mov	r1, r4
 8003608:	4630      	mov	r0, r6
 800360a:	f000 f917 	bl	800383c <__smakebuf_r>
 800360e:	89a2      	ldrh	r2, [r4, #12]
 8003610:	f012 0301 	ands.w	r3, r2, #1
 8003614:	d00c      	beq.n	8003630 <__swsetup_r+0xbc>
 8003616:	2300      	movs	r3, #0
 8003618:	60a3      	str	r3, [r4, #8]
 800361a:	6963      	ldr	r3, [r4, #20]
 800361c:	425b      	negs	r3, r3
 800361e:	61a3      	str	r3, [r4, #24]
 8003620:	6923      	ldr	r3, [r4, #16]
 8003622:	b953      	cbnz	r3, 800363a <__swsetup_r+0xc6>
 8003624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003628:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800362c:	d1ba      	bne.n	80035a4 <__swsetup_r+0x30>
 800362e:	bd70      	pop	{r4, r5, r6, pc}
 8003630:	0792      	lsls	r2, r2, #30
 8003632:	bf58      	it	pl
 8003634:	6963      	ldrpl	r3, [r4, #20]
 8003636:	60a3      	str	r3, [r4, #8]
 8003638:	e7f2      	b.n	8003620 <__swsetup_r+0xac>
 800363a:	2000      	movs	r0, #0
 800363c:	e7f7      	b.n	800362e <__swsetup_r+0xba>
 800363e:	bf00      	nop
 8003640:	2000000c 	.word	0x2000000c
 8003644:	08003a48 	.word	0x08003a48
 8003648:	08003a68 	.word	0x08003a68
 800364c:	08003a28 	.word	0x08003a28

08003650 <_close_r>:
 8003650:	b538      	push	{r3, r4, r5, lr}
 8003652:	4c06      	ldr	r4, [pc, #24]	; (800366c <_close_r+0x1c>)
 8003654:	2300      	movs	r3, #0
 8003656:	4605      	mov	r5, r0
 8003658:	4608      	mov	r0, r1
 800365a:	6023      	str	r3, [r4, #0]
 800365c:	f7fd f813 	bl	8000686 <_close>
 8003660:	1c43      	adds	r3, r0, #1
 8003662:	d102      	bne.n	800366a <_close_r+0x1a>
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	b103      	cbz	r3, 800366a <_close_r+0x1a>
 8003668:	602b      	str	r3, [r5, #0]
 800366a:	bd38      	pop	{r3, r4, r5, pc}
 800366c:	20000120 	.word	0x20000120

08003670 <__sflush_r>:
 8003670:	898a      	ldrh	r2, [r1, #12]
 8003672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003676:	4605      	mov	r5, r0
 8003678:	0710      	lsls	r0, r2, #28
 800367a:	460c      	mov	r4, r1
 800367c:	d458      	bmi.n	8003730 <__sflush_r+0xc0>
 800367e:	684b      	ldr	r3, [r1, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	dc05      	bgt.n	8003690 <__sflush_r+0x20>
 8003684:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	dc02      	bgt.n	8003690 <__sflush_r+0x20>
 800368a:	2000      	movs	r0, #0
 800368c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003690:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003692:	2e00      	cmp	r6, #0
 8003694:	d0f9      	beq.n	800368a <__sflush_r+0x1a>
 8003696:	2300      	movs	r3, #0
 8003698:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800369c:	682f      	ldr	r7, [r5, #0]
 800369e:	6a21      	ldr	r1, [r4, #32]
 80036a0:	602b      	str	r3, [r5, #0]
 80036a2:	d032      	beq.n	800370a <__sflush_r+0x9a>
 80036a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036a6:	89a3      	ldrh	r3, [r4, #12]
 80036a8:	075a      	lsls	r2, r3, #29
 80036aa:	d505      	bpl.n	80036b8 <__sflush_r+0x48>
 80036ac:	6863      	ldr	r3, [r4, #4]
 80036ae:	1ac0      	subs	r0, r0, r3
 80036b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036b2:	b10b      	cbz	r3, 80036b8 <__sflush_r+0x48>
 80036b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036b6:	1ac0      	subs	r0, r0, r3
 80036b8:	2300      	movs	r3, #0
 80036ba:	4602      	mov	r2, r0
 80036bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036be:	6a21      	ldr	r1, [r4, #32]
 80036c0:	4628      	mov	r0, r5
 80036c2:	47b0      	blx	r6
 80036c4:	1c43      	adds	r3, r0, #1
 80036c6:	89a3      	ldrh	r3, [r4, #12]
 80036c8:	d106      	bne.n	80036d8 <__sflush_r+0x68>
 80036ca:	6829      	ldr	r1, [r5, #0]
 80036cc:	291d      	cmp	r1, #29
 80036ce:	d848      	bhi.n	8003762 <__sflush_r+0xf2>
 80036d0:	4a29      	ldr	r2, [pc, #164]	; (8003778 <__sflush_r+0x108>)
 80036d2:	40ca      	lsrs	r2, r1
 80036d4:	07d6      	lsls	r6, r2, #31
 80036d6:	d544      	bpl.n	8003762 <__sflush_r+0xf2>
 80036d8:	2200      	movs	r2, #0
 80036da:	6062      	str	r2, [r4, #4]
 80036dc:	04d9      	lsls	r1, r3, #19
 80036de:	6922      	ldr	r2, [r4, #16]
 80036e0:	6022      	str	r2, [r4, #0]
 80036e2:	d504      	bpl.n	80036ee <__sflush_r+0x7e>
 80036e4:	1c42      	adds	r2, r0, #1
 80036e6:	d101      	bne.n	80036ec <__sflush_r+0x7c>
 80036e8:	682b      	ldr	r3, [r5, #0]
 80036ea:	b903      	cbnz	r3, 80036ee <__sflush_r+0x7e>
 80036ec:	6560      	str	r0, [r4, #84]	; 0x54
 80036ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036f0:	602f      	str	r7, [r5, #0]
 80036f2:	2900      	cmp	r1, #0
 80036f4:	d0c9      	beq.n	800368a <__sflush_r+0x1a>
 80036f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036fa:	4299      	cmp	r1, r3
 80036fc:	d002      	beq.n	8003704 <__sflush_r+0x94>
 80036fe:	4628      	mov	r0, r5
 8003700:	f000 f8de 	bl	80038c0 <_free_r>
 8003704:	2000      	movs	r0, #0
 8003706:	6360      	str	r0, [r4, #52]	; 0x34
 8003708:	e7c0      	b.n	800368c <__sflush_r+0x1c>
 800370a:	2301      	movs	r3, #1
 800370c:	4628      	mov	r0, r5
 800370e:	47b0      	blx	r6
 8003710:	1c41      	adds	r1, r0, #1
 8003712:	d1c8      	bne.n	80036a6 <__sflush_r+0x36>
 8003714:	682b      	ldr	r3, [r5, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0c5      	beq.n	80036a6 <__sflush_r+0x36>
 800371a:	2b1d      	cmp	r3, #29
 800371c:	d001      	beq.n	8003722 <__sflush_r+0xb2>
 800371e:	2b16      	cmp	r3, #22
 8003720:	d101      	bne.n	8003726 <__sflush_r+0xb6>
 8003722:	602f      	str	r7, [r5, #0]
 8003724:	e7b1      	b.n	800368a <__sflush_r+0x1a>
 8003726:	89a3      	ldrh	r3, [r4, #12]
 8003728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800372c:	81a3      	strh	r3, [r4, #12]
 800372e:	e7ad      	b.n	800368c <__sflush_r+0x1c>
 8003730:	690f      	ldr	r7, [r1, #16]
 8003732:	2f00      	cmp	r7, #0
 8003734:	d0a9      	beq.n	800368a <__sflush_r+0x1a>
 8003736:	0793      	lsls	r3, r2, #30
 8003738:	680e      	ldr	r6, [r1, #0]
 800373a:	bf08      	it	eq
 800373c:	694b      	ldreq	r3, [r1, #20]
 800373e:	600f      	str	r7, [r1, #0]
 8003740:	bf18      	it	ne
 8003742:	2300      	movne	r3, #0
 8003744:	eba6 0807 	sub.w	r8, r6, r7
 8003748:	608b      	str	r3, [r1, #8]
 800374a:	f1b8 0f00 	cmp.w	r8, #0
 800374e:	dd9c      	ble.n	800368a <__sflush_r+0x1a>
 8003750:	4643      	mov	r3, r8
 8003752:	463a      	mov	r2, r7
 8003754:	6a21      	ldr	r1, [r4, #32]
 8003756:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003758:	4628      	mov	r0, r5
 800375a:	47b0      	blx	r6
 800375c:	2800      	cmp	r0, #0
 800375e:	dc06      	bgt.n	800376e <__sflush_r+0xfe>
 8003760:	89a3      	ldrh	r3, [r4, #12]
 8003762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003766:	81a3      	strh	r3, [r4, #12]
 8003768:	f04f 30ff 	mov.w	r0, #4294967295
 800376c:	e78e      	b.n	800368c <__sflush_r+0x1c>
 800376e:	4407      	add	r7, r0
 8003770:	eba8 0800 	sub.w	r8, r8, r0
 8003774:	e7e9      	b.n	800374a <__sflush_r+0xda>
 8003776:	bf00      	nop
 8003778:	20400001 	.word	0x20400001

0800377c <_fflush_r>:
 800377c:	b538      	push	{r3, r4, r5, lr}
 800377e:	690b      	ldr	r3, [r1, #16]
 8003780:	4605      	mov	r5, r0
 8003782:	460c      	mov	r4, r1
 8003784:	b1db      	cbz	r3, 80037be <_fflush_r+0x42>
 8003786:	b118      	cbz	r0, 8003790 <_fflush_r+0x14>
 8003788:	6983      	ldr	r3, [r0, #24]
 800378a:	b90b      	cbnz	r3, 8003790 <_fflush_r+0x14>
 800378c:	f7ff fa8e 	bl	8002cac <__sinit>
 8003790:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <_fflush_r+0x48>)
 8003792:	429c      	cmp	r4, r3
 8003794:	d109      	bne.n	80037aa <_fflush_r+0x2e>
 8003796:	686c      	ldr	r4, [r5, #4]
 8003798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800379c:	b17b      	cbz	r3, 80037be <_fflush_r+0x42>
 800379e:	4621      	mov	r1, r4
 80037a0:	4628      	mov	r0, r5
 80037a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037a6:	f7ff bf63 	b.w	8003670 <__sflush_r>
 80037aa:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <_fflush_r+0x4c>)
 80037ac:	429c      	cmp	r4, r3
 80037ae:	d101      	bne.n	80037b4 <_fflush_r+0x38>
 80037b0:	68ac      	ldr	r4, [r5, #8]
 80037b2:	e7f1      	b.n	8003798 <_fflush_r+0x1c>
 80037b4:	4b05      	ldr	r3, [pc, #20]	; (80037cc <_fflush_r+0x50>)
 80037b6:	429c      	cmp	r4, r3
 80037b8:	bf08      	it	eq
 80037ba:	68ec      	ldreq	r4, [r5, #12]
 80037bc:	e7ec      	b.n	8003798 <_fflush_r+0x1c>
 80037be:	2000      	movs	r0, #0
 80037c0:	bd38      	pop	{r3, r4, r5, pc}
 80037c2:	bf00      	nop
 80037c4:	08003a48 	.word	0x08003a48
 80037c8:	08003a68 	.word	0x08003a68
 80037cc:	08003a28 	.word	0x08003a28

080037d0 <_lseek_r>:
 80037d0:	b538      	push	{r3, r4, r5, lr}
 80037d2:	4c07      	ldr	r4, [pc, #28]	; (80037f0 <_lseek_r+0x20>)
 80037d4:	4605      	mov	r5, r0
 80037d6:	4608      	mov	r0, r1
 80037d8:	4611      	mov	r1, r2
 80037da:	2200      	movs	r2, #0
 80037dc:	6022      	str	r2, [r4, #0]
 80037de:	461a      	mov	r2, r3
 80037e0:	f7fc ff78 	bl	80006d4 <_lseek>
 80037e4:	1c43      	adds	r3, r0, #1
 80037e6:	d102      	bne.n	80037ee <_lseek_r+0x1e>
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	b103      	cbz	r3, 80037ee <_lseek_r+0x1e>
 80037ec:	602b      	str	r3, [r5, #0]
 80037ee:	bd38      	pop	{r3, r4, r5, pc}
 80037f0:	20000120 	.word	0x20000120

080037f4 <__swhatbuf_r>:
 80037f4:	b570      	push	{r4, r5, r6, lr}
 80037f6:	460e      	mov	r6, r1
 80037f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037fc:	2900      	cmp	r1, #0
 80037fe:	b096      	sub	sp, #88	; 0x58
 8003800:	4614      	mov	r4, r2
 8003802:	461d      	mov	r5, r3
 8003804:	da07      	bge.n	8003816 <__swhatbuf_r+0x22>
 8003806:	2300      	movs	r3, #0
 8003808:	602b      	str	r3, [r5, #0]
 800380a:	89b3      	ldrh	r3, [r6, #12]
 800380c:	061a      	lsls	r2, r3, #24
 800380e:	d410      	bmi.n	8003832 <__swhatbuf_r+0x3e>
 8003810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003814:	e00e      	b.n	8003834 <__swhatbuf_r+0x40>
 8003816:	466a      	mov	r2, sp
 8003818:	f000 f8b2 	bl	8003980 <_fstat_r>
 800381c:	2800      	cmp	r0, #0
 800381e:	dbf2      	blt.n	8003806 <__swhatbuf_r+0x12>
 8003820:	9a01      	ldr	r2, [sp, #4]
 8003822:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003826:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800382a:	425a      	negs	r2, r3
 800382c:	415a      	adcs	r2, r3
 800382e:	602a      	str	r2, [r5, #0]
 8003830:	e7ee      	b.n	8003810 <__swhatbuf_r+0x1c>
 8003832:	2340      	movs	r3, #64	; 0x40
 8003834:	2000      	movs	r0, #0
 8003836:	6023      	str	r3, [r4, #0]
 8003838:	b016      	add	sp, #88	; 0x58
 800383a:	bd70      	pop	{r4, r5, r6, pc}

0800383c <__smakebuf_r>:
 800383c:	898b      	ldrh	r3, [r1, #12]
 800383e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003840:	079d      	lsls	r5, r3, #30
 8003842:	4606      	mov	r6, r0
 8003844:	460c      	mov	r4, r1
 8003846:	d507      	bpl.n	8003858 <__smakebuf_r+0x1c>
 8003848:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800384c:	6023      	str	r3, [r4, #0]
 800384e:	6123      	str	r3, [r4, #16]
 8003850:	2301      	movs	r3, #1
 8003852:	6163      	str	r3, [r4, #20]
 8003854:	b002      	add	sp, #8
 8003856:	bd70      	pop	{r4, r5, r6, pc}
 8003858:	ab01      	add	r3, sp, #4
 800385a:	466a      	mov	r2, sp
 800385c:	f7ff ffca 	bl	80037f4 <__swhatbuf_r>
 8003860:	9900      	ldr	r1, [sp, #0]
 8003862:	4605      	mov	r5, r0
 8003864:	4630      	mov	r0, r6
 8003866:	f7ff faab 	bl	8002dc0 <_malloc_r>
 800386a:	b948      	cbnz	r0, 8003880 <__smakebuf_r+0x44>
 800386c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003870:	059a      	lsls	r2, r3, #22
 8003872:	d4ef      	bmi.n	8003854 <__smakebuf_r+0x18>
 8003874:	f023 0303 	bic.w	r3, r3, #3
 8003878:	f043 0302 	orr.w	r3, r3, #2
 800387c:	81a3      	strh	r3, [r4, #12]
 800387e:	e7e3      	b.n	8003848 <__smakebuf_r+0xc>
 8003880:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <__smakebuf_r+0x7c>)
 8003882:	62b3      	str	r3, [r6, #40]	; 0x28
 8003884:	89a3      	ldrh	r3, [r4, #12]
 8003886:	6020      	str	r0, [r4, #0]
 8003888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800388c:	81a3      	strh	r3, [r4, #12]
 800388e:	9b00      	ldr	r3, [sp, #0]
 8003890:	6163      	str	r3, [r4, #20]
 8003892:	9b01      	ldr	r3, [sp, #4]
 8003894:	6120      	str	r0, [r4, #16]
 8003896:	b15b      	cbz	r3, 80038b0 <__smakebuf_r+0x74>
 8003898:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800389c:	4630      	mov	r0, r6
 800389e:	f000 f881 	bl	80039a4 <_isatty_r>
 80038a2:	b128      	cbz	r0, 80038b0 <__smakebuf_r+0x74>
 80038a4:	89a3      	ldrh	r3, [r4, #12]
 80038a6:	f023 0303 	bic.w	r3, r3, #3
 80038aa:	f043 0301 	orr.w	r3, r3, #1
 80038ae:	81a3      	strh	r3, [r4, #12]
 80038b0:	89a3      	ldrh	r3, [r4, #12]
 80038b2:	431d      	orrs	r5, r3
 80038b4:	81a5      	strh	r5, [r4, #12]
 80038b6:	e7cd      	b.n	8003854 <__smakebuf_r+0x18>
 80038b8:	08002c75 	.word	0x08002c75

080038bc <__malloc_lock>:
 80038bc:	4770      	bx	lr

080038be <__malloc_unlock>:
 80038be:	4770      	bx	lr

080038c0 <_free_r>:
 80038c0:	b538      	push	{r3, r4, r5, lr}
 80038c2:	4605      	mov	r5, r0
 80038c4:	2900      	cmp	r1, #0
 80038c6:	d045      	beq.n	8003954 <_free_r+0x94>
 80038c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038cc:	1f0c      	subs	r4, r1, #4
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	bfb8      	it	lt
 80038d2:	18e4      	addlt	r4, r4, r3
 80038d4:	f7ff fff2 	bl	80038bc <__malloc_lock>
 80038d8:	4a1f      	ldr	r2, [pc, #124]	; (8003958 <_free_r+0x98>)
 80038da:	6813      	ldr	r3, [r2, #0]
 80038dc:	4610      	mov	r0, r2
 80038de:	b933      	cbnz	r3, 80038ee <_free_r+0x2e>
 80038e0:	6063      	str	r3, [r4, #4]
 80038e2:	6014      	str	r4, [r2, #0]
 80038e4:	4628      	mov	r0, r5
 80038e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038ea:	f7ff bfe8 	b.w	80038be <__malloc_unlock>
 80038ee:	42a3      	cmp	r3, r4
 80038f0:	d90c      	bls.n	800390c <_free_r+0x4c>
 80038f2:	6821      	ldr	r1, [r4, #0]
 80038f4:	1862      	adds	r2, r4, r1
 80038f6:	4293      	cmp	r3, r2
 80038f8:	bf04      	itt	eq
 80038fa:	681a      	ldreq	r2, [r3, #0]
 80038fc:	685b      	ldreq	r3, [r3, #4]
 80038fe:	6063      	str	r3, [r4, #4]
 8003900:	bf04      	itt	eq
 8003902:	1852      	addeq	r2, r2, r1
 8003904:	6022      	streq	r2, [r4, #0]
 8003906:	6004      	str	r4, [r0, #0]
 8003908:	e7ec      	b.n	80038e4 <_free_r+0x24>
 800390a:	4613      	mov	r3, r2
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	b10a      	cbz	r2, 8003914 <_free_r+0x54>
 8003910:	42a2      	cmp	r2, r4
 8003912:	d9fa      	bls.n	800390a <_free_r+0x4a>
 8003914:	6819      	ldr	r1, [r3, #0]
 8003916:	1858      	adds	r0, r3, r1
 8003918:	42a0      	cmp	r0, r4
 800391a:	d10b      	bne.n	8003934 <_free_r+0x74>
 800391c:	6820      	ldr	r0, [r4, #0]
 800391e:	4401      	add	r1, r0
 8003920:	1858      	adds	r0, r3, r1
 8003922:	4282      	cmp	r2, r0
 8003924:	6019      	str	r1, [r3, #0]
 8003926:	d1dd      	bne.n	80038e4 <_free_r+0x24>
 8003928:	6810      	ldr	r0, [r2, #0]
 800392a:	6852      	ldr	r2, [r2, #4]
 800392c:	605a      	str	r2, [r3, #4]
 800392e:	4401      	add	r1, r0
 8003930:	6019      	str	r1, [r3, #0]
 8003932:	e7d7      	b.n	80038e4 <_free_r+0x24>
 8003934:	d902      	bls.n	800393c <_free_r+0x7c>
 8003936:	230c      	movs	r3, #12
 8003938:	602b      	str	r3, [r5, #0]
 800393a:	e7d3      	b.n	80038e4 <_free_r+0x24>
 800393c:	6820      	ldr	r0, [r4, #0]
 800393e:	1821      	adds	r1, r4, r0
 8003940:	428a      	cmp	r2, r1
 8003942:	bf04      	itt	eq
 8003944:	6811      	ldreq	r1, [r2, #0]
 8003946:	6852      	ldreq	r2, [r2, #4]
 8003948:	6062      	str	r2, [r4, #4]
 800394a:	bf04      	itt	eq
 800394c:	1809      	addeq	r1, r1, r0
 800394e:	6021      	streq	r1, [r4, #0]
 8003950:	605c      	str	r4, [r3, #4]
 8003952:	e7c7      	b.n	80038e4 <_free_r+0x24>
 8003954:	bd38      	pop	{r3, r4, r5, pc}
 8003956:	bf00      	nop
 8003958:	20000090 	.word	0x20000090

0800395c <_read_r>:
 800395c:	b538      	push	{r3, r4, r5, lr}
 800395e:	4c07      	ldr	r4, [pc, #28]	; (800397c <_read_r+0x20>)
 8003960:	4605      	mov	r5, r0
 8003962:	4608      	mov	r0, r1
 8003964:	4611      	mov	r1, r2
 8003966:	2200      	movs	r2, #0
 8003968:	6022      	str	r2, [r4, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	f7fc fe52 	bl	8000614 <_read>
 8003970:	1c43      	adds	r3, r0, #1
 8003972:	d102      	bne.n	800397a <_read_r+0x1e>
 8003974:	6823      	ldr	r3, [r4, #0]
 8003976:	b103      	cbz	r3, 800397a <_read_r+0x1e>
 8003978:	602b      	str	r3, [r5, #0]
 800397a:	bd38      	pop	{r3, r4, r5, pc}
 800397c:	20000120 	.word	0x20000120

08003980 <_fstat_r>:
 8003980:	b538      	push	{r3, r4, r5, lr}
 8003982:	4c07      	ldr	r4, [pc, #28]	; (80039a0 <_fstat_r+0x20>)
 8003984:	2300      	movs	r3, #0
 8003986:	4605      	mov	r5, r0
 8003988:	4608      	mov	r0, r1
 800398a:	4611      	mov	r1, r2
 800398c:	6023      	str	r3, [r4, #0]
 800398e:	f7fc fe86 	bl	800069e <_fstat>
 8003992:	1c43      	adds	r3, r0, #1
 8003994:	d102      	bne.n	800399c <_fstat_r+0x1c>
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	b103      	cbz	r3, 800399c <_fstat_r+0x1c>
 800399a:	602b      	str	r3, [r5, #0]
 800399c:	bd38      	pop	{r3, r4, r5, pc}
 800399e:	bf00      	nop
 80039a0:	20000120 	.word	0x20000120

080039a4 <_isatty_r>:
 80039a4:	b538      	push	{r3, r4, r5, lr}
 80039a6:	4c06      	ldr	r4, [pc, #24]	; (80039c0 <_isatty_r+0x1c>)
 80039a8:	2300      	movs	r3, #0
 80039aa:	4605      	mov	r5, r0
 80039ac:	4608      	mov	r0, r1
 80039ae:	6023      	str	r3, [r4, #0]
 80039b0:	f7fc fe85 	bl	80006be <_isatty>
 80039b4:	1c43      	adds	r3, r0, #1
 80039b6:	d102      	bne.n	80039be <_isatty_r+0x1a>
 80039b8:	6823      	ldr	r3, [r4, #0]
 80039ba:	b103      	cbz	r3, 80039be <_isatty_r+0x1a>
 80039bc:	602b      	str	r3, [r5, #0]
 80039be:	bd38      	pop	{r3, r4, r5, pc}
 80039c0:	20000120 	.word	0x20000120

080039c4 <_init>:
 80039c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c6:	bf00      	nop
 80039c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ca:	bc08      	pop	{r3}
 80039cc:	469e      	mov	lr, r3
 80039ce:	4770      	bx	lr

080039d0 <_fini>:
 80039d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d2:	bf00      	nop
 80039d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039d6:	bc08      	pop	{r3}
 80039d8:	469e      	mov	lr, r3
 80039da:	4770      	bx	lr
